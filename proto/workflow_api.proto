// Primary API a CLI or website to talk to our workflow system.
// Uses Twirp for communication
// The Authorization is a JWT Identity token provided by Cognito for a logged in user.

syntax = "proto3";

option go_package = "github.com/apptreesoftware/go-workflow/pkg/core";

package core;

import "common.proto";

service WorkflowAPI {
    rpc RunWorkflow (RunWorkflowRequest) returns (TriggerResponse);
    rpc RetryWorkflow (RetryWorkflowRequest) returns (RetryWorkflowResponse);
    rpc RetryJob (RetryJobRequest) returns (TriggerResponse);

    rpc Ping (EmptyMessage) returns (BasicResponse);
    rpc PublishWorkflow (PublishWorkflowRequest) returns (BasicResponse);
    rpc ListWorkflows (ProjectRequest) returns (ListWorkflowResponse);

    rpc ListRemoteEngines (ProjectRequest) returns (ListRemoteEnginesResponse);
    rpc RegisterRemoteEngine (RegisterRemoteEngineRequest) returns (BasicResponse);
    rpc GetRemoteEngine (RemoteEngineRequest) returns (RemoteEngine);
    rpc RemoteEngineHealthCheck (RemoteEngineHealthRequest) returns (RemoteEngineHealthResponse);
    rpc UpdateRemoteEngine (RemoteEngineUpdateRequest) returns (RemoteEngineUpdateResponse);
    rpc RemoveRemoteEngine (RemoteEngineRequest) returns (BasicResponse);

    rpc GetStepPackage (StepPackageRequest) returns (StepPackageResponse);

    rpc ViewJobLog (ViewLogRequest) returns (ViewLogResponse);
    rpc ViewJobDetail (ViewJobDetailRequest) returns (ViewJobDetailResponse);

    rpc SearchJobs (JobSearch) returns (JobSearchResponse);

    rpc StoreValue (StoreValueRequest) returns (BasicResponse);
    rpc DeleteValue (DeleteValueRequest) returns (BasicResponse);
    rpc GetValues (ProjectValuesRequest) returns (ValueResponse);
    rpc GetValue (ProjectValueRequest) returns (SingleValueResponse);
    rpc ViewQueue (ViewQueueRequest) returns (QueueResponse);
    rpc CancelJobs (CancelJobRequest) returns (CancelJobResponse);

    rpc DisableWorkflow (ProjectWorkflowRequest) returns (BasicResponse);
    rpc EnableWorkflow (ProjectWorkflowRequest) returns (BasicResponse);
    rpc RemoveWorkflow (ProjectWorkflowRequest) returns (BasicResponse);

    rpc PauseEngines (Empty) returns (BasicResponse);
    rpc UnpauseEngines (Empty) returns (BasicResponse);

    rpc AddEvent (AddEventRequest) returns (BasicResponse);
    rpc RemoveEvent (RemoveEventRequest) returns (BasicResponse);
}

message ProjectWorkflowRequest {
    string project = 1;
    string workflow = 2;
}

message StoreValueRequest {
    string key = 1;
    string value = 2;
    string project = 3;
    bool isSecret = 4;
}

message DeleteValueRequest {
    string key = 1;
    string project = 2;
}


message SingleValueResponse {
    string value = 1;
}

message ValueResponse {
    map<string, string> values = 1;
}


message ProjectValue {
    string key = 1;
    string value = 2;
    string project = 3;
    bool isEncrypted = 4;
}

message JobSearch {
    string project = 1;
    string workflow = 2;
    string jobId = 3;
    string spawnedFromJobId = 4;
    JobStatus status = 5;
    int64 fromDate = 6;
    int64 toDate = 7;
    int64 count = 8;
    int64 offset = 9;
    bool includeStorage = 10;
}

message JobSearchResponse {
    repeated JobSearchResult items = 1;
    bool moreAvailable = 2;
}

message JobSearchResult {
    string id = 1;
    bool success = 2;
    int64 start = 3;
    int64 end = 4;
    double duration = 5;
    JobFailureInfo failureInfo = 6;
    string project = 7;
    string workflow = 8;
    string triggerType = 9;
    string input = 11;
    int64 spawnCount = 12;
    repeated SpawnTrailEntry spawnTrail = 13;
    string statusMessage = 14;
    repeated JobStepSummary steps = 15;
    bytes storage = 16;
    bytes trigger = 17;
}

message JobStepSummary {
    string stepId = 1;
    double duration = 2;
    string status = 3;
    string message = 4;
}

message JobFailureInfo {
    int64 stepIndex = 1;
    string message = 2;
    string stepInput = 3;
    string stepName = 4;
}

message RemoteEngineUpdateRequest {
    string name = 1;
    string project = 2;
    bool forceUpdate = 3;
    bool waitForVersion = 4;
}

message RemoteEngineUpdateResponse {
    string status = 1;
    string version = 2;
    string os = 3;
    string arch = 4;
}

enum JobStatus {
    ALL = 0;
    SUCCESS = 1;
    FAIL = 2;
}

message RemoteEngineHealthRequest {
    string name = 1;
    string project = 2;
}

message RemoteEngineHealthResponse {
    string status = 1;
    string version = 2;
    string os = 3;
    string arch = 4;
}

message ListRemoteEnginesResponse {
    repeated RemoteEngine engines = 1;
}

message RemoteEngine {
    string name = 1;
    string host = 2;
    string apiKey = 3;
    bytes cert = 4;
}

message RemoteEngineRequest {
    string project = 1;
    string engine = 2;
}

message RegisterRemoteEngineRequest {
    string name = 1;
    string host = 2;
    bytes clientCert = 3;
    string apiKey = 4;
    string project = 5;
}


message ProjectValueRequest {
    string project = 1;
    string key = 2;
}

message ProjectValuesRequest {
    string project = 1;
    bool decrypt = 2;
}

message ListWorkflowResponse {
    repeated WorkflowOverview workflows = 1;
}

message WorkflowOverview {
    string id = 1;
    string project = 2;
    string dependencies = 3;
    string triggers = 4;
}

message RunWorkflowRequest {
    string projectId = 1;
    string workflowId = 2;
    bytes triggerBody = 3;
    int64 count = 4;
}

message RetryWorkflowRequest {
    string project = 1;
    string workflow = 2;
    int64 fromDate = 3;
    int64 toDate = 4;
}

message RetryWorkflowResponse {
    int64 count = 1;
    repeated string jobIds = 2;
    repeated string errors = 3;
}

message RetryJobRequest {
    string project = 1;
    string jobId = 2;
    int64 stepIndex = 3;
}

message PublishWorkflowRequest {
    string projectId = 1;
    bytes data = 2;
}

message QueueItem {
    string project = 1;
    string workflow = 2;
    map<string, string> runContext = 3;
    bool running = 4;
    string createdOn = 5;
    string triggeredBy = 6;
}

message QueueResponse {
    bool success = 1;
    string message = 2;
    int64 recordCount = 3;
    repeated QueueItem items = 4;
}

message ViewQueueRequest {
    string project = 1;
    string workflow = 2;
    string triggerType = 3;
}

message ViewLogRequest {
    string project = 1;
    string jobId = 2;
    string logLevel = 3;
}

message Log {
    string logLevel = 1;
    string message = 2;
    string timestamp = 3;
}

message ViewLogResponse {
    bool success = 1;
    string message = 2;
    repeated Log logs = 3;
}

message ViewJobDetailRequest {
    string project = 1;
    string job = 2;
}

message ViewJobDetailResponse {
    bool success = 1;
    string message = 2;
    JobDetail jobDetail = 3;
}

message JobDetail {
    string startTime = 1;
    string endTime = 2;
    double duration = 3;
    map<string, string> storage = 4;
    repeated StepResult stepResults = 5;
}

message StepResult {
    string stepId = 1;
    int64 duration = 2;
    string status = 3;
    string message = 4;
    map<string, string> inputs = 5;
    map<string, string> outputs = 6;
}

message TriggerResponse {
    bool success = 1;
    string message = 2;
    string project = 3;
    string jobId = 4;
}

message CancelJobRequest {
    string project = 1;
    string workflow = 2;
    string jobId = 3;
    bool allPending = 4;
    bool allRunning = 5;
}

message CancelJobResponse {
    bool success = 1;
    string message = 2;
    int64 canceledCount = 3;
}

message AddEventRequest {
    string project = 1;
    bool onStart = 2;
    bool onFailure = 3;
    bool onSuccess = 4;
    bool dailySummary = 5;
    string url = 6;
    map<string, string> extraHeaders = 7;
}

message RemoveEventRequest {
    string project = 1;
    string url = 2;
}