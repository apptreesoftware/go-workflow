// Primary API a CLI or website to talk to our workflow system.
// Uses Twirp for communication
// The Authorization is a JWT Identity token provided by Cognito for a logged in user.

syntax = "proto3";

option go_package = "github.com/apptreesoftware/go-workflow/pkg/core";

package core;

import "common.proto";
import "step_library.proto";

service WorkflowAPI {
    rpc RunWorkflow (RunWorkflowRequest) returns (TriggerResponse);
    rpc Ping (EmptyMessage) returns (BasicResponse);
    rpc PublishWorkflow (PublishWorkflowRequest) returns (BasicResponse);
    rpc ListWorkflows (ProjectRequest) returns (ListWorkflowResponse);

    rpc ListRemoteEngines (ProjectRequest) returns (ListRemoteEnginesResponse);
    rpc RegisterRemoteEngine (RegisterRemoteEngineRequest) returns (BasicResponse);
    rpc GetRemoteEngine (RemoteEngineRequest) returns (RemoteEngine);
    rpc RemoteEngineHealthCheck (RemoteEngineRequest) returns (RemoteEngineHealthResponse);
    rpc UpdateRemoteEngine (RemoteEngineUpdateRequest) returns (RemoteEngineUpdateResponse);
    rpc RemoveRemoteEngine (RemoteEngineRequest) returns (BasicResponse);


    rpc ViewJobLog (ViewLogRequest) returns (ViewLogResponse);
    rpc GetWorkflowHistory (WorkflowHistoryRequest) returns (WorkflowHistoryResponse);

    rpc StoreValue (StoreValueRequest) returns (BasicResponse);
    rpc DeleteValue (DeleteValueRequest) returns (BasicResponse);
    rpc GetValues (ProjectValuesRequest) returns (ValueResponse);
    rpc GetValue (ProjectValueRequest) returns (SingleValueResponse);
    rpc ViewQueue (ViewQueueRequest) returns (QueueResponse);
    rpc CancelJobs (CancelJobRequest) returns (CancelJobResponse);

    rpc DisableWorkflow (WorkflowRequest) returns (BasicResponse);
    rpc EnableWorkflow (WorkflowRequest) returns (BasicResponse);
    rpc RemoveWorkflow (WorkflowRequest) returns (BasicResponse);

    rpc UpdateAvailable (UpdateAvailableRequest) returns (UpdateAvailableResponse);

    rpc PauseEngines (Empty) returns (BasicResponse);
    rpc UnpauseEngines (Empty) returns (BasicResponse);
}

message WorkflowRequest {
    string workflow = 1;
}

message StoreValueRequest {
    string key = 1;
    string value = 2;
    bool isSecret = 3;
}

message DeleteValueRequest {
    string key = 1;
}


message SingleValueResponse {
    string value = 1;
}

message ValueResponse {
    map<string, string> values = 1;
}


message ProjectValue {
    string key = 1;
    string value = 2;
    bool isEncrypted = 3;
}

message WorkflowHistoryRequest {
    string workflow = 1;
    int64 offset = 2;
    int64 count = 3;
    string jobId = 4;
}

message WorkflowHistoryResponse {
    repeated WorkflowHistory items = 1;
}

message WorkflowHistory {
    string id = 1;
    bool success = 2;
    int64 start = 3;
    int64 end = 4;
    double duration = 5;
    string failureReason = 6;
    string workflow = 7;
    string triggerType = 8;
    string parentItem = 9;
    string input = 10;
}

message RemoteEngineUpdateRequest {
    string name = 1;
    bool forceUpdate = 2;
    bool waitForVersion = 3;
}

message RemoteEngineUpdateResponse {
    string status = 1;
    string version = 2;
    string os = 3;
    string arch = 4;
}


message RemoteEngineHealthResponse {
    string status = 1;
    string version = 2;
    string os = 3;
    string arch = 4;
}

message ListRemoteEnginesResponse {
    repeated RemoteEngine engines = 1;
}

message RemoteEngine {
    string name = 1;
    string host = 2;
    string apiKey = 3;
    bytes cert = 4;
}

message RemoteEngineRequest {
    string engine = 1;
}

message RegisterRemoteEngineRequest {
    string name = 1;
    string host = 2;
    bytes clientCert = 3;
    string apiKey = 4;
}

message ProjectValueRequest {
    string key = 1;
}

message ProjectValuesRequest {
    bool decrypt = 1;
}

message ListWorkflowResponse {
    repeated WorkflowOverview workflows = 1;
}

message WorkflowOverview {
    string id = 1;
    string dependencies = 2;
    string triggers = 3;
}

message RunWorkflowRequest {
    string workflowId = 1;
    bytes triggerBody = 2;
    int64 count = 3;
}

message PublishWorkflowRequest {
    bytes data = 1;
    string name = 2;
}

message QueueItem {
    string workflow = 1;
    map<string, string> runContext = 2;
    bool running = 3;
    string createdOn = 4;
    string triggeredBy = 5;
}

message QueueResponse {
    bool success = 1;
    string message = 2;
    int64 recordCount = 3;
    repeated QueueItem items = 4;
}

message ViewQueueRequest {
    string workflow = 1;
    string triggerType = 2;
}

message ViewLogRequest {
    string jobId = 1;
    string logLevel = 2;
}

message Log {
    string logLevel = 1;
    string message = 2;
    string timestamp = 3;
}

message ViewLogResponse {
    bool success = 1;
    string message = 2;
    repeated Log logs = 3;
}

message TriggerResponse {
    bool success = 1;
    string message = 2;
    string jobId = 3;
}

message CancelJobRequest {
    string workflow = 1;
    string jobId = 2;
    bool allPending = 3;
    bool allRunning = 4;
}

message CancelJobResponse {
    bool success = 1;
    string message = 2;
    int64 canceledCount = 3;
}

message UpdateAvailableRequest {
    string os = 1;
    string arch = 2;
    string version = 3;
}

message UpdateAvailableResponse {
    bool available = 1;
    string version = 2;
    string url = 3;
}
