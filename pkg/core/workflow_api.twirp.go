// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: workflow_api.proto

package core

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =====================
// WorkflowAPI Interface
// =====================

type WorkflowAPI interface {
	RunWorkflow(context.Context, *RunWorkflowRequest) (*TriggerResponse, error)

	Ping(context.Context, *EmptyMessage) (*BasicResponse, error)

	PublishWorkflow(context.Context, *PublishWorkflowRequest) (*BasicResponse, error)

	ListWorkflows(context.Context, *ProjectRequest) (*ListWorkflowResponse, error)

	ListRemoteEngines(context.Context, *ProjectRequest) (*ListRemoteEnginesResponse, error)

	RegisterRemoteEngine(context.Context, *RegisterRemoteEngineRequest) (*BasicResponse, error)

	GetRemoteEngine(context.Context, *RemoteEngineRequest) (*RemoteEngine, error)

	RemoteEngineHealthCheck(context.Context, *RemoteEngineRequest) (*RemoteEngineHealthResponse, error)

	UpdateRemoteEngine(context.Context, *RemoteEngineUpdateRequest) (*RemoteEngineUpdateResponse, error)

	RemoveRemoteEngine(context.Context, *RemoteEngineRequest) (*BasicResponse, error)

	ViewJobLog(context.Context, *ViewLogRequest) (*ViewLogResponse, error)

	GetWorkflowHistory(context.Context, *WorkflowHistoryRequest) (*WorkflowHistoryResponse, error)

	StoreValue(context.Context, *StoreValueRequest) (*BasicResponse, error)

	DeleteValue(context.Context, *DeleteValueRequest) (*BasicResponse, error)

	GetValues(context.Context, *ProjectValuesRequest) (*ValueResponse, error)

	GetValue(context.Context, *ProjectValueRequest) (*SingleValueResponse, error)

	ViewQueue(context.Context, *ViewQueueRequest) (*QueueResponse, error)

	CancelJobs(context.Context, *CancelJobRequest) (*CancelJobResponse, error)

	DisableWorkflow(context.Context, *WorkflowRequest) (*BasicResponse, error)

	EnableWorkflow(context.Context, *WorkflowRequest) (*BasicResponse, error)

	RemoveWorkflow(context.Context, *WorkflowRequest) (*BasicResponse, error)

	UpdateAvailable(context.Context, *UpdateAvailableRequest) (*UpdateAvailableResponse, error)

	PauseEngines(context.Context, *Empty) (*BasicResponse, error)

	UnpauseEngines(context.Context, *Empty) (*BasicResponse, error)
}

// ===========================
// WorkflowAPI Protobuf Client
// ===========================

type workflowAPIProtobufClient struct {
	client HTTPClient
	urls   [24]string
}

// NewWorkflowAPIProtobufClient creates a Protobuf client that implements the WorkflowAPI interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewWorkflowAPIProtobufClient(addr string, client HTTPClient) WorkflowAPI {
	prefix := urlBase(addr) + WorkflowAPIPathPrefix
	urls := [24]string{
		prefix + "RunWorkflow",
		prefix + "Ping",
		prefix + "PublishWorkflow",
		prefix + "ListWorkflows",
		prefix + "ListRemoteEngines",
		prefix + "RegisterRemoteEngine",
		prefix + "GetRemoteEngine",
		prefix + "RemoteEngineHealthCheck",
		prefix + "UpdateRemoteEngine",
		prefix + "RemoveRemoteEngine",
		prefix + "ViewJobLog",
		prefix + "GetWorkflowHistory",
		prefix + "StoreValue",
		prefix + "DeleteValue",
		prefix + "GetValues",
		prefix + "GetValue",
		prefix + "ViewQueue",
		prefix + "CancelJobs",
		prefix + "DisableWorkflow",
		prefix + "EnableWorkflow",
		prefix + "RemoveWorkflow",
		prefix + "UpdateAvailable",
		prefix + "PauseEngines",
		prefix + "UnpauseEngines",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &workflowAPIProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &workflowAPIProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *workflowAPIProtobufClient) RunWorkflow(ctx context.Context, in *RunWorkflowRequest) (*TriggerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RunWorkflow")
	out := new(TriggerResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) PublishWorkflow(ctx context.Context, in *PublishWorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "PublishWorkflow")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) ListWorkflows(ctx context.Context, in *ProjectRequest) (*ListWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	out := new(ListWorkflowResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) ListRemoteEngines(ctx context.Context, in *ProjectRequest) (*ListRemoteEnginesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ListRemoteEngines")
	out := new(ListRemoteEnginesResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) RegisterRemoteEngine(ctx context.Context, in *RegisterRemoteEngineRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterRemoteEngine")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) GetRemoteEngine(ctx context.Context, in *RemoteEngineRequest) (*RemoteEngine, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetRemoteEngine")
	out := new(RemoteEngine)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) RemoteEngineHealthCheck(ctx context.Context, in *RemoteEngineRequest) (*RemoteEngineHealthResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RemoteEngineHealthCheck")
	out := new(RemoteEngineHealthResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) UpdateRemoteEngine(ctx context.Context, in *RemoteEngineUpdateRequest) (*RemoteEngineUpdateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRemoteEngine")
	out := new(RemoteEngineUpdateResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) RemoveRemoteEngine(ctx context.Context, in *RemoteEngineRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveRemoteEngine")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) ViewJobLog(ctx context.Context, in *ViewLogRequest) (*ViewLogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ViewJobLog")
	out := new(ViewLogResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) GetWorkflowHistory(ctx context.Context, in *WorkflowHistoryRequest) (*WorkflowHistoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowHistory")
	out := new(WorkflowHistoryResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) StoreValue(ctx context.Context, in *StoreValueRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "StoreValue")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) DeleteValue(ctx context.Context, in *DeleteValueRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteValue")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) GetValues(ctx context.Context, in *ProjectValuesRequest) (*ValueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	out := new(ValueResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[14], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) GetValue(ctx context.Context, in *ProjectValueRequest) (*SingleValueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetValue")
	out := new(SingleValueResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[15], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) ViewQueue(ctx context.Context, in *ViewQueueRequest) (*QueueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ViewQueue")
	out := new(QueueResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[16], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) CancelJobs(ctx context.Context, in *CancelJobRequest) (*CancelJobResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "CancelJobs")
	out := new(CancelJobResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[17], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) DisableWorkflow(ctx context.Context, in *WorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "DisableWorkflow")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[18], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) EnableWorkflow(ctx context.Context, in *WorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "EnableWorkflow")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[19], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) RemoveWorkflow(ctx context.Context, in *WorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveWorkflow")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[20], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) UpdateAvailable(ctx context.Context, in *UpdateAvailableRequest) (*UpdateAvailableResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	out := new(UpdateAvailableResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[21], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) PauseEngines(ctx context.Context, in *Empty) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "PauseEngines")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[22], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIProtobufClient) UnpauseEngines(ctx context.Context, in *Empty) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UnpauseEngines")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[23], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// WorkflowAPI JSON Client
// =======================

type workflowAPIJSONClient struct {
	client HTTPClient
	urls   [24]string
}

// NewWorkflowAPIJSONClient creates a JSON client that implements the WorkflowAPI interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewWorkflowAPIJSONClient(addr string, client HTTPClient) WorkflowAPI {
	prefix := urlBase(addr) + WorkflowAPIPathPrefix
	urls := [24]string{
		prefix + "RunWorkflow",
		prefix + "Ping",
		prefix + "PublishWorkflow",
		prefix + "ListWorkflows",
		prefix + "ListRemoteEngines",
		prefix + "RegisterRemoteEngine",
		prefix + "GetRemoteEngine",
		prefix + "RemoteEngineHealthCheck",
		prefix + "UpdateRemoteEngine",
		prefix + "RemoveRemoteEngine",
		prefix + "ViewJobLog",
		prefix + "GetWorkflowHistory",
		prefix + "StoreValue",
		prefix + "DeleteValue",
		prefix + "GetValues",
		prefix + "GetValue",
		prefix + "ViewQueue",
		prefix + "CancelJobs",
		prefix + "DisableWorkflow",
		prefix + "EnableWorkflow",
		prefix + "RemoveWorkflow",
		prefix + "UpdateAvailable",
		prefix + "PauseEngines",
		prefix + "UnpauseEngines",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &workflowAPIJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &workflowAPIJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *workflowAPIJSONClient) RunWorkflow(ctx context.Context, in *RunWorkflowRequest) (*TriggerResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RunWorkflow")
	out := new(TriggerResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) PublishWorkflow(ctx context.Context, in *PublishWorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "PublishWorkflow")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) ListWorkflows(ctx context.Context, in *ProjectRequest) (*ListWorkflowResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	out := new(ListWorkflowResponse)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) ListRemoteEngines(ctx context.Context, in *ProjectRequest) (*ListRemoteEnginesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ListRemoteEngines")
	out := new(ListRemoteEnginesResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) RegisterRemoteEngine(ctx context.Context, in *RegisterRemoteEngineRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterRemoteEngine")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) GetRemoteEngine(ctx context.Context, in *RemoteEngineRequest) (*RemoteEngine, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetRemoteEngine")
	out := new(RemoteEngine)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) RemoteEngineHealthCheck(ctx context.Context, in *RemoteEngineRequest) (*RemoteEngineHealthResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RemoteEngineHealthCheck")
	out := new(RemoteEngineHealthResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) UpdateRemoteEngine(ctx context.Context, in *RemoteEngineUpdateRequest) (*RemoteEngineUpdateResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRemoteEngine")
	out := new(RemoteEngineUpdateResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) RemoveRemoteEngine(ctx context.Context, in *RemoteEngineRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveRemoteEngine")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) ViewJobLog(ctx context.Context, in *ViewLogRequest) (*ViewLogResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ViewJobLog")
	out := new(ViewLogResponse)
	err := doJSONRequest(ctx, c.client, c.urls[10], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) GetWorkflowHistory(ctx context.Context, in *WorkflowHistoryRequest) (*WorkflowHistoryResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowHistory")
	out := new(WorkflowHistoryResponse)
	err := doJSONRequest(ctx, c.client, c.urls[11], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) StoreValue(ctx context.Context, in *StoreValueRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "StoreValue")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[12], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) DeleteValue(ctx context.Context, in *DeleteValueRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteValue")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[13], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) GetValues(ctx context.Context, in *ProjectValuesRequest) (*ValueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	out := new(ValueResponse)
	err := doJSONRequest(ctx, c.client, c.urls[14], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) GetValue(ctx context.Context, in *ProjectValueRequest) (*SingleValueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetValue")
	out := new(SingleValueResponse)
	err := doJSONRequest(ctx, c.client, c.urls[15], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) ViewQueue(ctx context.Context, in *ViewQueueRequest) (*QueueResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "ViewQueue")
	out := new(QueueResponse)
	err := doJSONRequest(ctx, c.client, c.urls[16], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) CancelJobs(ctx context.Context, in *CancelJobRequest) (*CancelJobResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "CancelJobs")
	out := new(CancelJobResponse)
	err := doJSONRequest(ctx, c.client, c.urls[17], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) DisableWorkflow(ctx context.Context, in *WorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "DisableWorkflow")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[18], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) EnableWorkflow(ctx context.Context, in *WorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "EnableWorkflow")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[19], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) RemoveWorkflow(ctx context.Context, in *WorkflowRequest) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "RemoveWorkflow")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[20], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) UpdateAvailable(ctx context.Context, in *UpdateAvailableRequest) (*UpdateAvailableResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	out := new(UpdateAvailableResponse)
	err := doJSONRequest(ctx, c.client, c.urls[21], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) PauseEngines(ctx context.Context, in *Empty) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "PauseEngines")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[22], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workflowAPIJSONClient) UnpauseEngines(ctx context.Context, in *Empty) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UnpauseEngines")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[23], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// WorkflowAPI Server Handler
// ==========================

type workflowAPIServer struct {
	WorkflowAPI
	hooks *twirp.ServerHooks
}

func NewWorkflowAPIServer(svc WorkflowAPI, hooks *twirp.ServerHooks) TwirpServer {
	return &workflowAPIServer{
		WorkflowAPI: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *workflowAPIServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// WorkflowAPIPathPrefix is used for all URL paths on a twirp WorkflowAPI server.
// Requests are always: POST WorkflowAPIPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const WorkflowAPIPathPrefix = "/twirp/core.WorkflowAPI/"

func (s *workflowAPIServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "WorkflowAPI")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/core.WorkflowAPI/RunWorkflow":
		s.serveRunWorkflow(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/Ping":
		s.servePing(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/PublishWorkflow":
		s.servePublishWorkflow(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/ListWorkflows":
		s.serveListWorkflows(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/ListRemoteEngines":
		s.serveListRemoteEngines(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/RegisterRemoteEngine":
		s.serveRegisterRemoteEngine(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/GetRemoteEngine":
		s.serveGetRemoteEngine(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/RemoteEngineHealthCheck":
		s.serveRemoteEngineHealthCheck(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/UpdateRemoteEngine":
		s.serveUpdateRemoteEngine(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/RemoveRemoteEngine":
		s.serveRemoveRemoteEngine(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/ViewJobLog":
		s.serveViewJobLog(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/GetWorkflowHistory":
		s.serveGetWorkflowHistory(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/StoreValue":
		s.serveStoreValue(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/DeleteValue":
		s.serveDeleteValue(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/GetValues":
		s.serveGetValues(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/GetValue":
		s.serveGetValue(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/ViewQueue":
		s.serveViewQueue(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/CancelJobs":
		s.serveCancelJobs(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/DisableWorkflow":
		s.serveDisableWorkflow(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/EnableWorkflow":
		s.serveEnableWorkflow(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/RemoveWorkflow":
		s.serveRemoveWorkflow(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/UpdateAvailable":
		s.serveUpdateAvailable(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/PauseEngines":
		s.servePauseEngines(ctx, resp, req)
		return
	case "/twirp/core.WorkflowAPI/UnpauseEngines":
		s.serveUnpauseEngines(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *workflowAPIServer) serveRunWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRunWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRunWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveRunWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RunWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RunWorkflowRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *TriggerResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RunWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TriggerResponse and nil error while calling RunWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRunWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RunWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(RunWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *TriggerResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RunWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *TriggerResponse and nil error while calling RunWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) servePing(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePingJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) servePingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EmptyMessage)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) servePingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EmptyMessage)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) servePublishWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePublishWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePublishWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) servePublishWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PublishWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(PublishWorkflowRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.PublishWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling PublishWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) servePublishWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PublishWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(PublishWorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.PublishWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling PublishWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveListWorkflows(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListWorkflowsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListWorkflowsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveListWorkflowsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ProjectRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ListWorkflowResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ListWorkflows(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListWorkflowResponse and nil error while calling ListWorkflows. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveListWorkflowsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListWorkflows")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ProjectRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ListWorkflowResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ListWorkflows(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListWorkflowResponse and nil error while calling ListWorkflows. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveListRemoteEngines(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveListRemoteEnginesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveListRemoteEnginesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveListRemoteEnginesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRemoteEngines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ProjectRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ListRemoteEnginesResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ListRemoteEngines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRemoteEnginesResponse and nil error while calling ListRemoteEngines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveListRemoteEnginesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ListRemoteEngines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ProjectRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ListRemoteEnginesResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ListRemoteEngines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ListRemoteEnginesResponse and nil error while calling ListRemoteEngines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRegisterRemoteEngine(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterRemoteEngineJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterRemoteEngineProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveRegisterRemoteEngineJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RegisterRemoteEngineRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RegisterRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling RegisterRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRegisterRemoteEngineProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(RegisterRemoteEngineRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RegisterRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling RegisterRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetRemoteEngine(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetRemoteEngineJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetRemoteEngineProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveGetRemoteEngineJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoteEngineRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RemoteEngine
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoteEngine and nil error while calling GetRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetRemoteEngineProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(RemoteEngineRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RemoteEngine
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoteEngine and nil error while calling GetRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRemoteEngineHealthCheck(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoteEngineHealthCheckJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoteEngineHealthCheckProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveRemoteEngineHealthCheckJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoteEngineHealthCheck")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoteEngineRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RemoteEngineHealthResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RemoteEngineHealthCheck(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoteEngineHealthResponse and nil error while calling RemoteEngineHealthCheck. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRemoteEngineHealthCheckProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoteEngineHealthCheck")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(RemoteEngineRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RemoteEngineHealthResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RemoteEngineHealthCheck(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoteEngineHealthResponse and nil error while calling RemoteEngineHealthCheck. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveUpdateRemoteEngine(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateRemoteEngineJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateRemoteEngineProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveUpdateRemoteEngineJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoteEngineUpdateRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RemoteEngineUpdateResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.UpdateRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoteEngineUpdateResponse and nil error while calling UpdateRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveUpdateRemoteEngineProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(RemoteEngineUpdateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RemoteEngineUpdateResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.UpdateRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RemoteEngineUpdateResponse and nil error while calling UpdateRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRemoveRemoteEngine(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveRemoteEngineJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveRemoteEngineProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveRemoveRemoteEngineJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RemoteEngineRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RemoveRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling RemoveRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRemoveRemoteEngineProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveRemoteEngine")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(RemoteEngineRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RemoveRemoteEngine(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling RemoveRemoteEngine. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveViewJobLog(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveViewJobLogJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveViewJobLogProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveViewJobLogJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ViewJobLog")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ViewLogRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ViewLogResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ViewJobLog(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ViewLogResponse and nil error while calling ViewJobLog. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveViewJobLogProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ViewJobLog")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ViewLogRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ViewLogResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ViewJobLog(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ViewLogResponse and nil error while calling ViewJobLog. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetWorkflowHistory(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetWorkflowHistoryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetWorkflowHistoryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveGetWorkflowHistoryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(WorkflowHistoryRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *WorkflowHistoryResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetWorkflowHistory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowHistoryResponse and nil error while calling GetWorkflowHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetWorkflowHistoryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetWorkflowHistory")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(WorkflowHistoryRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *WorkflowHistoryResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetWorkflowHistory(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *WorkflowHistoryResponse and nil error while calling GetWorkflowHistory. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveStoreValue(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveStoreValueJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveStoreValueProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveStoreValueJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StoreValue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(StoreValueRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.StoreValue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling StoreValue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveStoreValueProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "StoreValue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(StoreValueRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.StoreValue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling StoreValue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveDeleteValue(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteValueJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteValueProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveDeleteValueJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteValue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(DeleteValueRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.DeleteValue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling DeleteValue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveDeleteValueProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteValue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(DeleteValueRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.DeleteValue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling DeleteValue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetValues(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetValuesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetValuesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveGetValuesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ProjectValuesRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ValueResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetValues(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValueResponse and nil error while calling GetValues. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetValuesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetValues")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ProjectValuesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *ValueResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetValues(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *ValueResponse and nil error while calling GetValues. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetValue(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetValueJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetValueProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveGetValueJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetValue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ProjectValueRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *SingleValueResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetValue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SingleValueResponse and nil error while calling GetValue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveGetValueProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetValue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ProjectValueRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *SingleValueResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.GetValue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SingleValueResponse and nil error while calling GetValue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveViewQueue(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveViewQueueJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveViewQueueProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveViewQueueJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ViewQueue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(ViewQueueRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ViewQueue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueResponse and nil error while calling ViewQueue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveViewQueueProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ViewQueue")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(ViewQueueRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *QueueResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.ViewQueue(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *QueueResponse and nil error while calling ViewQueue. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveCancelJobs(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCancelJobsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCancelJobsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveCancelJobsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelJobs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(CancelJobRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *CancelJobResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.CancelJobs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CancelJobResponse and nil error while calling CancelJobs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveCancelJobsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CancelJobs")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(CancelJobRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *CancelJobResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.CancelJobs(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *CancelJobResponse and nil error while calling CancelJobs. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveDisableWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDisableWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDisableWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveDisableWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DisableWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(WorkflowRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.DisableWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling DisableWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveDisableWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DisableWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(WorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.DisableWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling DisableWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveEnableWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveEnableWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveEnableWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveEnableWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EnableWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(WorkflowRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.EnableWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling EnableWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveEnableWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "EnableWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(WorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.EnableWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling EnableWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRemoveWorkflow(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRemoveWorkflowJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRemoveWorkflowProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveRemoveWorkflowJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(WorkflowRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RemoveWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling RemoveWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveRemoveWorkflowProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RemoveWorkflow")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(WorkflowRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.RemoveWorkflow(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling RemoveWorkflow. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveUpdateAvailable(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAvailableJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateAvailableProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveUpdateAvailableJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateAvailableRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UpdateAvailableResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.UpdateAvailable(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvailableResponse and nil error while calling UpdateAvailable. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveUpdateAvailableProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(UpdateAvailableRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UpdateAvailableResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.UpdateAvailable(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvailableResponse and nil error while calling UpdateAvailable. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) servePauseEngines(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePauseEnginesJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePauseEnginesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) servePauseEnginesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PauseEngines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.PauseEngines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling PauseEngines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) servePauseEnginesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "PauseEngines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.PauseEngines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling PauseEngines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveUnpauseEngines(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUnpauseEnginesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUnpauseEnginesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *workflowAPIServer) serveUnpauseEnginesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UnpauseEngines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(Empty)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.UnpauseEngines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling UnpauseEngines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) serveUnpauseEnginesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UnpauseEngines")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.WorkflowAPI.UnpauseEngines(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling UnpauseEngines. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *workflowAPIServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor1, 0
}

func (s *workflowAPIServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor1 = []byte{
	// 1608 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x5f, 0x73, 0xd4, 0xc8,
	0x11, 0xaf, 0xfd, 0x83, 0xed, 0xed, 0x5d, 0x7b, 0xcd, 0xd8, 0x59, 0x2f, 0x1b, 0x63, 0x1c, 0x15,
	0x21, 0xae, 0x22, 0xd8, 0x84, 0xa4, 0x2a, 0x40, 0x85, 0x04, 0xfc, 0x07, 0x30, 0x71, 0xc0, 0x08,
	0x30, 0xb9, 0xbb, 0x07, 0x4a, 0x2b, 0xb5, 0xd7, 0xc2, 0x5a, 0x8d, 0x6e, 0x66, 0x64, 0xb3, 0x0f,
	0xf7, 0x70, 0x75, 0xf7, 0x78, 0x5f, 0xe0, 0xbe, 0xd4, 0x7d, 0xa6, 0xab, 0x91, 0x66, 0xb4, 0x23,
	0xad, 0x6c, 0xcc, 0xb9, 0xee, 0x6d, 0xba, 0xa7, 0xa7, 0xbb, 0xa7, 0xbb, 0xa7, 0x7f, 0x2d, 0x01,
	0x39, 0xa5, 0xec, 0xf8, 0x30, 0xa0, 0xa7, 0x1f, 0x9c, 0xc8, 0x5f, 0x8f, 0x18, 0x15, 0x94, 0xd4,
	0x5d, 0xca, 0xb0, 0xd7, 0x72, 0xe9, 0x70, 0x48, 0xc3, 0x94, 0xd7, 0x23, 0x5c, 0x60, 0xf4, 0x21,
	0xf0, 0xfb, 0xcc, 0x61, 0xa3, 0x94, 0x67, 0xdd, 0x81, 0xf6, 0x7b, 0x75, 0xda, 0xc6, 0x6f, 0x63,
	0xe4, 0x82, 0xf4, 0x60, 0x46, 0x2b, 0xec, 0x56, 0x56, 0x2b, 0x6b, 0x0d, 0x3b, 0xa3, 0xad, 0xf7,
	0x70, 0xf5, 0x8d, 0xa0, 0x0c, 0x0f, 0x9c, 0x20, 0x46, 0x7d, 0x60, 0x1e, 0x6a, 0xc7, 0x38, 0x52,
	0xb2, 0x72, 0x49, 0x16, 0xe1, 0xca, 0x89, 0x94, 0xe8, 0x56, 0x13, 0x5e, 0x4a, 0x48, 0xc5, 0x3e,
	0x7f, 0x83, 0x2e, 0x43, 0xd1, 0xad, 0xad, 0x56, 0xd6, 0x66, 0xec, 0x8c, 0xb6, 0x6e, 0x01, 0xd9,
	0xc6, 0x00, 0xc5, 0x67, 0x34, 0x5b, 0xb7, 0x61, 0xe1, 0x8d, 0x1f, 0x0e, 0x02, 0x2d, 0xc7, 0x23,
	0x1a, 0x72, 0x1c, 0x1b, 0xac, 0x18, 0x06, 0xad, 0x1f, 0x2a, 0x30, 0x9b, 0x97, 0xfb, 0x27, 0x4c,
	0x25, 0x5b, 0xbc, 0x5b, 0x59, 0xad, 0xad, 0x35, 0xef, 0xdd, 0x58, 0x97, 0x71, 0x5a, 0xcf, 0x09,
	0xa5, 0x14, 0xdf, 0x09, 0x05, 0x1b, 0xd9, 0x4a, 0xbc, 0xf7, 0x00, 0x9a, 0x06, 0xfb, 0xa2, 0x57,
	0x7e, 0x58, 0xbd, 0x5f, 0xb1, 0xfe, 0x0f, 0xad, 0x7d, 0x46, 0x3f, 0xa2, 0x2b, 0x12, 0x0d, 0x17,
	0x0e, 0xd7, 0x2a, 0x34, 0x7d, 0xbe, 0x13, 0xba, 0x6c, 0x14, 0x09, 0xf4, 0x54, 0xc4, 0x4c, 0x96,
	0xf5, 0x09, 0x3a, 0x3a, 0x79, 0xcf, 0x7d, 0x2e, 0x28, 0x1b, 0x5d, 0x20, 0x87, 0xa4, 0x03, 0x53,
	0xf4, 0xf0, 0x90, 0xa3, 0x48, 0xcc, 0xd5, 0x6c, 0x45, 0x49, 0x2f, 0x5c, 0x1a, 0x87, 0x69, 0x6e,
	0x6a, 0x76, 0x4a, 0x48, 0xee, 0x47, 0xda, 0xdf, 0xf5, 0xba, 0xf5, 0xd4, 0xb7, 0x84, 0xb0, 0x9e,
	0xc2, 0xd2, 0x84, 0x65, 0x15, 0xe2, 0xdb, 0x70, 0xc5, 0x17, 0x38, 0xd4, 0x11, 0xfe, 0x43, 0x1a,
	0xe1, 0xa2, 0x74, 0x2a, 0x63, 0xfd, 0x5c, 0x1d, 0xd7, 0x9f, 0xda, 0x22, 0x73, 0x50, 0xf5, 0x3d,
	0xe5, 0x75, 0xd5, 0xf7, 0x48, 0x17, 0xa6, 0x79, 0xec, 0xba, 0xc8, 0x79, 0xe2, 0xf0, 0x8c, 0xad,
	0x49, 0xe9, 0x1b, 0x17, 0x0e, 0xcb, 0x3c, 0x4e, 0x08, 0x19, 0x5f, 0x0c, 0x53, 0x7f, 0x6b, 0xb6,
	0x5c, 0xca, 0x68, 0x78, 0x31, 0x73, 0x84, 0x4f, 0xc3, 0xee, 0x95, 0xd5, 0xca, 0x5a, 0xc5, 0xce,
	0x68, 0x72, 0x13, 0x66, 0x0f, 0x1d, 0x3f, 0x88, 0x19, 0xda, 0xe8, 0x70, 0x1a, 0x76, 0xa7, 0x12,
	0xc3, 0x79, 0x66, 0x2e, 0x9e, 0xd3, 0x85, 0x78, 0xae, 0x42, 0x53, 0x30, 0x7f, 0x30, 0x40, 0xf6,
	0x76, 0x14, 0x61, 0x77, 0x26, 0xd9, 0x36, 0x59, 0x64, 0x05, 0x20, 0x72, 0x18, 0x86, 0x62, 0x57,
	0xe0, 0xb0, 0xdb, 0x48, 0x04, 0x0c, 0x8e, 0xbc, 0x87, 0x1f, 0x46, 0xb1, 0xe8, 0x42, 0x1a, 0xe3,
	0x84, 0xb0, 0x46, 0x70, 0xcd, 0xc6, 0x21, 0x15, 0xb8, 0x13, 0x0e, 0xfc, 0x10, 0xdf, 0x45, 0x9e,
	0x23, 0xb2, 0x97, 0x41, 0xa0, 0x1e, 0x3a, 0x43, 0x5d, 0xef, 0xc9, 0x5a, 0x3a, 0x72, 0x48, 0x99,
	0xab, 0x24, 0x55, 0xb0, 0x4c, 0x16, 0xb9, 0x05, 0x73, 0xa7, 0x8e, 0x2f, 0x9e, 0x52, 0x76, 0x80,
	0x8c, 0xcb, 0x70, 0xa4, 0x55, 0x55, 0xe0, 0x5a, 0x0c, 0x7a, 0x65, 0xa6, 0x55, 0x86, 0x3b, 0x30,
	0xc5, 0x85, 0x23, 0x62, 0xae, 0xac, 0x2b, 0x4a, 0x26, 0xea, 0x44, 0xa9, 0x4d, 0x0b, 0x59, 0x93,
	0x32, 0xa5, 0x94, 0x27, 0xb6, 0x1a, 0x76, 0x95, 0x72, 0xe9, 0xbd, 0xc3, 0xdc, 0x23, 0x55, 0x53,
	0xc9, 0xba, 0x68, 0xf3, 0x39, 0x3a, 0x81, 0x38, 0xfa, 0x9d, 0x6d, 0xee, 0xc2, 0xb5, 0x3d, 0x9f,
	0x0b, 0xd3, 0x2e, 0xcf, 0x4c, 0xfe, 0x15, 0xa6, 0x31, 0x65, 0xa9, 0x52, 0x26, 0x69, 0x29, 0x9b,
	0xd2, 0xb6, 0x16, 0xb1, 0xfa, 0xd0, 0x32, 0x37, 0x4a, 0x13, 0x44, 0xa0, 0x7e, 0x44, 0xb9, 0x50,
	0x9e, 0x26, 0x6b, 0x79, 0x31, 0x27, 0xf2, 0xff, 0x8b, 0x23, 0xe5, 0xaa, 0xa2, 0xa4, 0xac, 0x8b,
	0x4c, 0x24, 0xee, 0xb6, 0xec, 0x64, 0x6d, 0xdd, 0x81, 0x85, 0x9c, 0x71, 0x55, 0x0b, 0x1d, 0x98,
	0x4a, 0xbd, 0xd0, 0xb1, 0x49, 0x29, 0xeb, 0x3b, 0xf8, 0xa3, 0x8d, 0x03, 0x9f, 0x0b, 0x64, 0x65,
	0xc7, 0x2e, 0xea, 0xe1, 0x0a, 0x80, 0x1b, 0xf8, 0x18, 0x8a, 0x2d, 0x54, 0x4f, 0xad, 0x65, 0x1b,
	0x1c, 0xe3, 0x06, 0x75, 0xf3, 0x06, 0xd6, 0x5f, 0x60, 0xc1, 0xec, 0x7b, 0x67, 0xf7, 0xf4, 0xbb,
	0xb0, 0x68, 0x0a, 0x72, 0x2d, 0xd9, 0x85, 0x69, 0x0f, 0x93, 0x5e, 0x97, 0x48, 0xcf, 0xd8, 0x9a,
	0xb4, 0xf6, 0x60, 0x51, 0xe6, 0x6d, 0x8c, 0x5c, 0x2a, 0x65, 0xff, 0x80, 0x86, 0x7e, 0x96, 0x3a,
	0x69, 0x9d, 0x7c, 0xff, 0x79, 0x75, 0x82, 0xec, 0xc4, 0xc7, 0x53, 0x7b, 0x2c, 0x68, 0xf5, 0x61,
	0xbe, 0xb8, 0x3d, 0xd1, 0x84, 0x2c, 0x68, 0x79, 0x18, 0x61, 0xe8, 0x61, 0xe8, 0xfa, 0xc8, 0x55,
	0x80, 0x72, 0x3c, 0xd9, 0x24, 0xd4, 0xab, 0xd7, 0x75, 0x97, 0xd1, 0x56, 0x00, 0xc4, 0x8e, 0xc3,
	0x22, 0xd4, 0xae, 0x00, 0x68, 0x37, 0x76, 0xb5, 0x35, 0x83, 0x63, 0xb4, 0x96, 0x4d, 0xea, 0x8d,
	0x12, 0xa3, 0x2d, 0xdb, 0x64, 0x95, 0x37, 0x6d, 0xeb, 0x31, 0x74, 0xf6, 0xe3, 0x7e, 0xe0, 0xf3,
	0xa3, 0xa2, 0x45, 0x02, 0x75, 0xcf, 0x11, 0x4e, 0x62, 0xab, 0x65, 0x27, 0xeb, 0xac, 0x10, 0xaa,
	0xe3, 0x42, 0xb0, 0xbe, 0xaf, 0x42, 0xe3, 0x75, 0x8c, 0x31, 0x26, 0x0d, 0xea, 0x3c, 0x38, 0xf9,
	0x0f, 0x00, 0x8b, 0xc3, 0x2d, 0x1a, 0x0a, 0xfc, 0x24, 0x0b, 0xc7, 0x80, 0xd5, 0x4c, 0xc1, 0xba,
	0x9d, 0x49, 0xa4, 0xb0, 0x6a, 0x1c, 0x91, 0x69, 0x66, 0x71, 0x18, 0xfa, 0xe1, 0x40, 0x75, 0x23,
	0x4d, 0x92, 0x65, 0x68, 0xb8, 0x0c, 0x1d, 0x81, 0xde, 0xab, 0x50, 0x15, 0xd7, 0x98, 0x61, 0x04,
	0x07, 0xbd, 0xcd, 0x51, 0xd2, 0xd8, 0xc7, 0x7d, 0x57, 0xb2, 0x7a, 0x8f, 0xa0, 0x5d, 0x30, 0xfc,
	0x45, 0xc0, 0xfd, 0x53, 0x05, 0x66, 0x93, 0x2b, 0x64, 0xf5, 0x65, 0x40, 0x51, 0x25, 0x0f, 0x45,
	0x5d, 0x98, 0x1e, 0x22, 0xe7, 0xce, 0x40, 0xeb, 0xd1, 0xa4, 0x74, 0x93, 0xa1, 0x4b, 0x99, 0xb7,
	0x65, 0xe4, 0xc9, 0x64, 0x91, 0x3f, 0x6b, 0xc4, 0xac, 0x27, 0xc1, 0x6b, 0x17, 0x82, 0xa7, 0xb1,
	0x72, 0x1f, 0xe6, 0x0f, 0x7c, 0x3c, 0x55, 0x1e, 0x7d, 0x1e, 0xe7, 0x0b, 0xb8, 0x54, 0x9d, 0xc0,
	0x25, 0x6b, 0x13, 0xe6, 0xa4, 0xc6, 0x3d, 0x3a, 0xd0, 0xfa, 0x32, 0xb4, 0xaf, 0x18, 0x68, 0x2f,
	0xad, 0x04, 0x74, 0xb0, 0x87, 0x27, 0x18, 0x28, 0x35, 0x19, 0x6d, 0x7d, 0x05, 0xb5, 0x3d, 0x3a,
	0xc8, 0x89, 0x54, 0xf2, 0x22, 0xe7, 0xc4, 0x66, 0x19, 0x1a, 0xc2, 0x1f, 0x22, 0x17, 0xce, 0x30,
	0x52, 0x4f, 0x66, 0xcc, 0xb0, 0x3c, 0x68, 0x67, 0xee, 0x5d, 0x22, 0x01, 0xd7, 0xa1, 0x1e, 0xd0,
	0x81, 0x7c, 0x92, 0x32, 0xba, 0x8d, 0x34, 0xba, 0x52, 0x69, 0xc2, 0xb6, 0xbe, 0x81, 0xf6, 0xdb,
	0x34, 0x26, 0x97, 0xb2, 0x92, 0x45, 0xae, 0x66, 0xce, 0x49, 0x3f, 0x56, 0x60, 0x7e, 0xcb, 0x09,
	0x5d, 0x0c, 0x5e, 0xd0, 0xfe, 0x45, 0x92, 0x96, 0xa9, 0xa9, 0x9a, 0x09, 0x58, 0x01, 0x70, 0x82,
	0x60, 0x1f, 0x43, 0x6f, 0xfc, 0x4a, 0x0c, 0x8e, 0xda, 0xb7, 0xd5, 0x2b, 0xaa, 0x67, 0xfb, 0x8a,
	0x63, 0x0d, 0xe1, 0xaa, 0xe1, 0xc5, 0x25, 0x6e, 0x79, 0x13, 0x66, 0xdd, 0x44, 0x11, 0xe6, 0xca,
	0x39, 0xcf, 0xb4, 0x0e, 0xa0, 0x93, 0x8e, 0x0c, 0x4f, 0x4e, 0x1c, 0x3f, 0x70, 0xfa, 0x41, 0x56,
	0xaf, 0x29, 0x28, 0x57, 0x26, 0x40, 0xb9, 0x3a, 0x06, 0x65, 0x13, 0xd2, 0x6b, 0x39, 0x48, 0xb7,
	0x5c, 0x58, 0x9a, 0xd0, 0xab, 0x2e, 0xb3, 0x0c, 0x0d, 0x47, 0x33, 0xd5, 0x75, 0xc6, 0x8c, 0x73,
	0xa6, 0x84, 0x79, 0xa8, 0xc5, 0x2c, 0x50, 0x86, 0xe4, 0xf2, 0xde, 0x2f, 0x2d, 0x68, 0xea, 0xae,
	0xf9, 0x64, 0x7f, 0x97, 0xfc, 0x1b, 0x9a, 0x46, 0xe7, 0x26, 0x5d, 0x35, 0x04, 0x4c, 0x34, 0xf3,
	0x9e, 0x9a, 0x74, 0x8b, 0xc5, 0xb4, 0x01, 0xf5, 0x7d, 0x99, 0x23, 0x35, 0x3d, 0xec, 0x0c, 0x23,
	0x31, 0xfa, 0x5f, 0x1a, 0xce, 0xde, 0x42, 0xca, 0xdb, 0x74, 0xb8, 0xef, 0x66, 0x07, 0xb6, 0xa1,
	0x5d, 0x68, 0xde, 0x64, 0x39, 0x95, 0x2b, 0xef, 0xe9, 0xe5, 0x5a, 0x9e, 0xc0, 0xac, 0x09, 0x91,
	0x9c, 0x2c, 0x2a, 0x1d, 0x29, 0xd2, 0xea, 0xb3, 0x3d, 0xf5, 0x1c, 0xca, 0xd0, 0xf4, 0x05, 0x5c,
	0x9d, 0x98, 0x8e, 0xce, 0x50, 0x73, 0x63, 0xac, 0xa6, 0x7c, 0x98, 0x7a, 0x09, 0x8b, 0x65, 0xb3,
	0x08, 0xf9, 0x93, 0x9e, 0xa9, 0xce, 0x9c, 0x53, 0xca, 0xaf, 0xf7, 0x18, 0xda, 0xcf, 0x30, 0x67,
	0x8b, 0x5c, 0x2b, 0x19, 0xcf, 0x94, 0x8a, 0x92, 0xc9, 0x8d, 0x1c, 0xc0, 0xd2, 0xe4, 0xbc, 0xb9,
	0x75, 0x84, 0xee, 0xf1, 0x79, 0x9a, 0x56, 0x27, 0xb7, 0x0a, 0x93, 0xea, 0x7b, 0x20, 0x7a, 0x5e,
	0x36, 0xac, 0xdd, 0x98, 0x3c, 0x97, 0x1b, 0xe8, 0xcb, 0x14, 0x17, 0xc6, 0xee, 0x6d, 0x20, 0x72,
	0xf7, 0x04, 0x2f, 0x7a, 0xeb, 0xd2, 0xc0, 0x3d, 0x00, 0x90, 0x4d, 0xf5, 0x05, 0xed, 0xcb, 0xb6,
	0xad, 0xb2, 0x99, 0x47, 0x01, 0x5d, 0xc9, 0xc5, 0xe6, 0xfb, 0x1a, 0xc8, 0x33, 0x14, 0xc5, 0xcf,
	0xb5, 0xe5, 0xf2, 0x0f, 0x3c, 0xa5, 0xea, 0xfa, 0x19, 0xbb, 0x4a, 0xe5, 0x43, 0x80, 0xf1, 0xff,
	0x04, 0xb2, 0x94, 0x0a, 0x4f, 0xfc, 0x61, 0x28, 0xbf, 0xc9, 0xbf, 0xa0, 0x69, 0xfc, 0x32, 0xd0,
	0x0f, 0x73, 0xf2, 0x2f, 0xc2, 0x59, 0xa7, 0x1b, 0xcf, 0x50, 0x0d, 0x9c, 0xa4, 0x97, 0x2b, 0xea,
	0xdc, 0x14, 0xaa, 0x4f, 0xe7, 0xff, 0x23, 0x3c, 0x86, 0x19, 0x7d, 0x5a, 0x67, 0xa0, 0x64, 0xd6,
	0xed, 0xa9, 0xad, 0xb2, 0x3f, 0x16, 0xf7, 0xa1, 0x91, 0xa1, 0x39, 0xe9, 0x8c, 0x03, 0x6e, 0xc2,
	0xbb, 0xb6, 0x9d, 0x1f, 0x42, 0x1e, 0x01, 0x64, 0xcd, 0x9c, 0xeb, 0xa3, 0x45, 0x90, 0xe9, 0x2d,
	0x4d, 0xf0, 0xb3, 0xe3, 0xed, 0x6d, 0x9f, 0xcb, 0xb6, 0x98, 0xb5, 0x97, 0xc2, 0x37, 0xfa, 0x67,
	0xe2, 0x36, 0xb7, 0x13, 0x5e, 0xe6, 0x74, 0x5a, 0xc3, 0xbf, 0xe9, 0xf4, 0x4b, 0x68, 0x17, 0xfa,
	0xbf, 0xae, 0xbe, 0x72, 0xb8, 0xd1, 0xd5, 0x77, 0x16, 0x68, 0xdc, 0x85, 0xd6, 0xbe, 0x13, 0xf3,
	0xac, 0xb7, 0x35, 0x8d, 0x16, 0x5d, 0xee, 0xc1, 0x3d, 0x98, 0x7b, 0x17, 0x46, 0x5f, 0x74, 0x66,
	0xf3, 0x6f, 0x5f, 0x6f, 0x0c, 0x7c, 0x71, 0x14, 0xf7, 0xd7, 0x5d, 0x3a, 0xdc, 0x70, 0xa2, 0x48,
	0x30, 0x44, 0x4e, 0x0f, 0xc5, 0xa9, 0xc3, 0x70, 0x63, 0x40, 0xef, 0x68, 0xf0, 0xdf, 0x88, 0x8e,
	0x07, 0x1b, 0x52, 0x41, 0x7f, 0x2a, 0xf9, 0x39, 0xf7, 0xf7, 0x5f, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x75, 0x28, 0xe6, 0x51, 0xda, 0x13, 0x00, 0x00,
}
