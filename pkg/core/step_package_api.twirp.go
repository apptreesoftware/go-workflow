// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: step_package_api.proto

package core

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ==========================
// StepPackageStore Interface
// ==========================

type StepPackageStore interface {
	Ping(context.Context, *EmptyMessage) (*BasicResponse, error)

	RegisterPackage(context.Context, *RegisteredPackage) (*Empty, error)

	GetPackage(context.Context, *StepPackageRequest) (*RegisteredPackage, error)

	GetPackageById(context.Context, *StepPackageIdRequest) (*RegisteredPackage, error)

	GetStep(context.Context, *GetSingleStepRequest) (*GetSingleStepResponse, error)

	SearchStepsForLibrary(context.Context, *SearchStepsRequest) (*SearchStepsResponse, error)

	GetAllStepsForLibrary(context.Context, *GetAllStepsRequest) (*GetAllStepsResponse, error)

	GetPackageSteps(context.Context, *GetStepsForPackageRequest) (*GetStepsForPackageResponse, error)

	GetAllPackageNamesForLibrary(context.Context, *GetAllPackagesInfoRequest) (*GetAllPackagesInfoResponse, error)

	GetPackageInfoForLibrary(context.Context, *GetPackageInfoRequest) (*GetPackageInfoResponse, error)
}

// ================================
// StepPackageStore Protobuf Client
// ================================

type stepPackageStoreProtobufClient struct {
	client HTTPClient
	urls   [10]string
}

// NewStepPackageStoreProtobufClient creates a Protobuf client that implements the StepPackageStore interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewStepPackageStoreProtobufClient(addr string, client HTTPClient) StepPackageStore {
	prefix := urlBase(addr) + StepPackageStorePathPrefix
	urls := [10]string{
		prefix + "Ping",
		prefix + "RegisterPackage",
		prefix + "GetPackage",
		prefix + "GetPackageById",
		prefix + "GetStep",
		prefix + "SearchStepsForLibrary",
		prefix + "GetAllStepsForLibrary",
		prefix + "GetPackageSteps",
		prefix + "GetAllPackageNamesForLibrary",
		prefix + "GetPackageInfoForLibrary",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &stepPackageStoreProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &stepPackageStoreProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *stepPackageStoreProtobufClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) RegisterPackage(ctx context.Context, in *RegisteredPackage) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterPackage")
	out := new(Empty)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) GetPackage(ctx context.Context, in *StepPackageRequest) (*RegisteredPackage, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackage")
	out := new(RegisteredPackage)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) GetPackageById(ctx context.Context, in *StepPackageIdRequest) (*RegisteredPackage, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageById")
	out := new(RegisteredPackage)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) GetStep(ctx context.Context, in *GetSingleStepRequest) (*GetSingleStepResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetStep")
	out := new(GetSingleStepResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) SearchStepsForLibrary(ctx context.Context, in *SearchStepsRequest) (*SearchStepsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "SearchStepsForLibrary")
	out := new(SearchStepsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) GetAllStepsForLibrary(ctx context.Context, in *GetAllStepsRequest) (*GetAllStepsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetAllStepsForLibrary")
	out := new(GetAllStepsResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) GetPackageSteps(ctx context.Context, in *GetStepsForPackageRequest) (*GetStepsForPackageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageSteps")
	out := new(GetStepsForPackageResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) GetAllPackageNamesForLibrary(ctx context.Context, in *GetAllPackagesInfoRequest) (*GetAllPackagesInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetAllPackageNamesForLibrary")
	out := new(GetAllPackagesInfoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreProtobufClient) GetPackageInfoForLibrary(ctx context.Context, in *GetPackageInfoRequest) (*GetPackageInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageInfoForLibrary")
	out := new(GetPackageInfoResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ============================
// StepPackageStore JSON Client
// ============================

type stepPackageStoreJSONClient struct {
	client HTTPClient
	urls   [10]string
}

// NewStepPackageStoreJSONClient creates a JSON client that implements the StepPackageStore interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewStepPackageStoreJSONClient(addr string, client HTTPClient) StepPackageStore {
	prefix := urlBase(addr) + StepPackageStorePathPrefix
	urls := [10]string{
		prefix + "Ping",
		prefix + "RegisterPackage",
		prefix + "GetPackage",
		prefix + "GetPackageById",
		prefix + "GetStep",
		prefix + "SearchStepsForLibrary",
		prefix + "GetAllStepsForLibrary",
		prefix + "GetPackageSteps",
		prefix + "GetAllPackageNamesForLibrary",
		prefix + "GetPackageInfoForLibrary",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &stepPackageStoreJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &stepPackageStoreJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *stepPackageStoreJSONClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) RegisterPackage(ctx context.Context, in *RegisteredPackage) (*Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "RegisterPackage")
	out := new(Empty)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) GetPackage(ctx context.Context, in *StepPackageRequest) (*RegisteredPackage, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackage")
	out := new(RegisteredPackage)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) GetPackageById(ctx context.Context, in *StepPackageIdRequest) (*RegisteredPackage, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageById")
	out := new(RegisteredPackage)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) GetStep(ctx context.Context, in *GetSingleStepRequest) (*GetSingleStepResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetStep")
	out := new(GetSingleStepResponse)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) SearchStepsForLibrary(ctx context.Context, in *SearchStepsRequest) (*SearchStepsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "SearchStepsForLibrary")
	out := new(SearchStepsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) GetAllStepsForLibrary(ctx context.Context, in *GetAllStepsRequest) (*GetAllStepsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetAllStepsForLibrary")
	out := new(GetAllStepsResponse)
	err := doJSONRequest(ctx, c.client, c.urls[6], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) GetPackageSteps(ctx context.Context, in *GetStepsForPackageRequest) (*GetStepsForPackageResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageSteps")
	out := new(GetStepsForPackageResponse)
	err := doJSONRequest(ctx, c.client, c.urls[7], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) GetAllPackageNamesForLibrary(ctx context.Context, in *GetAllPackagesInfoRequest) (*GetAllPackagesInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetAllPackageNamesForLibrary")
	out := new(GetAllPackagesInfoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[8], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepPackageStoreJSONClient) GetPackageInfoForLibrary(ctx context.Context, in *GetPackageInfoRequest) (*GetPackageInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageInfoForLibrary")
	out := new(GetPackageInfoResponse)
	err := doJSONRequest(ctx, c.client, c.urls[9], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ===============================
// StepPackageStore Server Handler
// ===============================

type stepPackageStoreServer struct {
	StepPackageStore
	hooks *twirp.ServerHooks
}

func NewStepPackageStoreServer(svc StepPackageStore, hooks *twirp.ServerHooks) TwirpServer {
	return &stepPackageStoreServer{
		StepPackageStore: svc,
		hooks:            hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *stepPackageStoreServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// StepPackageStorePathPrefix is used for all URL paths on a twirp StepPackageStore server.
// Requests are always: POST StepPackageStorePathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const StepPackageStorePathPrefix = "/twirp/core.StepPackageStore/"

func (s *stepPackageStoreServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "StepPackageStore")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/core.StepPackageStore/Ping":
		s.servePing(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/RegisterPackage":
		s.serveRegisterPackage(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/GetPackage":
		s.serveGetPackage(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/GetPackageById":
		s.serveGetPackageById(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/GetStep":
		s.serveGetStep(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/SearchStepsForLibrary":
		s.serveSearchStepsForLibrary(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/GetAllStepsForLibrary":
		s.serveGetAllStepsForLibrary(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/GetPackageSteps":
		s.serveGetPackageSteps(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/GetAllPackageNamesForLibrary":
		s.serveGetAllPackageNamesForLibrary(ctx, resp, req)
		return
	case "/twirp/core.StepPackageStore/GetPackageInfoForLibrary":
		s.serveGetPackageInfoForLibrary(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *stepPackageStoreServer) servePing(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePingJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) servePingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EmptyMessage)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) servePingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EmptyMessage)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveRegisterPackage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveRegisterPackageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveRegisterPackageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveRegisterPackageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterPackage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(RegisteredPackage)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.RegisterPackage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling RegisterPackage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveRegisterPackageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "RegisterPackage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(RegisteredPackage)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *Empty
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.RegisterPackage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *Empty and nil error while calling RegisterPackage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackage(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPackageJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPackageProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveGetPackageJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(StepPackageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RegisteredPackage
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisteredPackage and nil error while calling GetPackage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackageProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackage")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(StepPackageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RegisteredPackage
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackage(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisteredPackage and nil error while calling GetPackage. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackageById(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPackageByIdJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPackageByIdProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveGetPackageByIdJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageById")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(StepPackageIdRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RegisteredPackage
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackageById(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisteredPackage and nil error while calling GetPackageById. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackageByIdProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageById")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(StepPackageIdRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *RegisteredPackage
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackageById(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *RegisteredPackage and nil error while calling GetPackageById. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetStep(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetStepJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetStepProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveGetStepJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStep")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetSingleStepRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetSingleStepResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetStep(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSingleStepResponse and nil error while calling GetStep. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetStepProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetStep")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetSingleStepRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetSingleStepResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetStep(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetSingleStepResponse and nil error while calling GetStep. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveSearchStepsForLibrary(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveSearchStepsForLibraryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveSearchStepsForLibraryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveSearchStepsForLibraryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SearchStepsForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(SearchStepsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *SearchStepsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.SearchStepsForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SearchStepsResponse and nil error while calling SearchStepsForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveSearchStepsForLibraryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "SearchStepsForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(SearchStepsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *SearchStepsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.SearchStepsForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *SearchStepsResponse and nil error while calling SearchStepsForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetAllStepsForLibrary(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAllStepsForLibraryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAllStepsForLibraryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveGetAllStepsForLibraryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAllStepsForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetAllStepsRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetAllStepsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetAllStepsForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAllStepsResponse and nil error while calling GetAllStepsForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetAllStepsForLibraryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAllStepsForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetAllStepsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetAllStepsResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetAllStepsForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAllStepsResponse and nil error while calling GetAllStepsForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackageSteps(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPackageStepsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPackageStepsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveGetPackageStepsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageSteps")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetStepsForPackageRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetStepsForPackageResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackageSteps(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStepsForPackageResponse and nil error while calling GetPackageSteps. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackageStepsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageSteps")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetStepsForPackageRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetStepsForPackageResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackageSteps(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetStepsForPackageResponse and nil error while calling GetPackageSteps. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetAllPackageNamesForLibrary(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetAllPackageNamesForLibraryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetAllPackageNamesForLibraryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveGetAllPackageNamesForLibraryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAllPackageNamesForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetAllPackagesInfoRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetAllPackagesInfoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetAllPackageNamesForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAllPackagesInfoResponse and nil error while calling GetAllPackageNamesForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetAllPackageNamesForLibraryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetAllPackageNamesForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetAllPackagesInfoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetAllPackagesInfoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetAllPackageNamesForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetAllPackagesInfoResponse and nil error while calling GetAllPackageNamesForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackageInfoForLibrary(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetPackageInfoForLibraryJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetPackageInfoForLibraryProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *stepPackageStoreServer) serveGetPackageInfoForLibraryJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageInfoForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(GetPackageInfoRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetPackageInfoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackageInfoForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPackageInfoResponse and nil error while calling GetPackageInfoForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) serveGetPackageInfoForLibraryProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetPackageInfoForLibrary")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(GetPackageInfoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *GetPackageInfoResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.StepPackageStore.GetPackageInfoForLibrary(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *GetPackageInfoResponse and nil error while calling GetPackageInfoForLibrary. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *stepPackageStoreServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor3, 0
}

func (s *stepPackageStoreServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor3 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x40, 0x15, 0x48, 0x0b, 0x9d, 0x16, 0x4a, 0x17, 0x51, 0x8c, 0x89, 0xd4, 0xa8, 0xa7, 0x5e,
	0x88, 0x45, 0x39, 0x70, 0xe0, 0x80, 0x88, 0x28, 0x51, 0xa4, 0x82, 0x2a, 0xa7, 0x5c, 0xb8, 0x54,
	0x1b, 0x67, 0xe2, 0xac, 0x62, 0x7b, 0x96, 0xdd, 0x8d, 0x22, 0xff, 0x20, 0x5f, 0xc4, 0x07, 0x20,
	0x7b, 0xd7, 0xb5, 0x1b, 0x27, 0xe2, 0x96, 0x99, 0x37, 0xf3, 0x66, 0x76, 0x92, 0xc0, 0xa9, 0x36,
	0x28, 0xef, 0x24, 0x8f, 0x96, 0x3c, 0xc6, 0x3b, 0x2e, 0xc5, 0x40, 0x2a, 0x32, 0xc4, 0xba, 0x11,
	0x29, 0xf4, 0x8f, 0x22, 0x4a, 0x53, 0xca, 0x6c, 0xce, 0x67, 0x65, 0x6d, 0x22, 0xa6, 0x8a, 0xab,
	0xdc, 0xe6, 0xce, 0xff, 0x74, 0xe0, 0x24, 0xc4, 0x58, 0x68, 0x83, 0x0a, 0x67, 0x37, 0xd6, 0xc3,
	0x3e, 0xc1, 0x89, 0x53, 0x7e, 0xc5, 0xb9, 0xc8, 0x84, 0x11, 0x94, 0x79, 0x9d, 0x7e, 0xe7, 0xe2,
	0xf0, 0xf2, 0xd9, 0xa0, 0x30, 0x0f, 0x5c, 0x65, 0xd8, 0xae, 0x63, 0xe7, 0x70, 0x94, 0x50, 0xc4,
	0x8b, 0xcf, 0xb7, 0xb9, 0x44, 0xef, 0x51, 0xbf, 0x73, 0x71, 0x10, 0x3e, 0xc8, 0x31, 0x1f, 0x9e,
	0x56, 0xb1, 0xf7, 0xb8, 0xe4, 0xf7, 0x31, 0xeb, 0xc1, 0x81, 0x5c, 0x4d, 0x13, 0xa1, 0x17, 0xe3,
	0x99, 0xd7, 0x2d, 0x61, 0x9d, 0x60, 0xa7, 0xb0, 0xcf, 0x57, 0x66, 0x41, 0xca, 0xdb, 0x2b, 0x91,
	0x8b, 0x2e, 0xff, 0xee, 0xc1, 0x8b, 0x89, 0x41, 0xe9, 0x16, 0x9b, 0x18, 0x52, 0xc8, 0x02, 0xe8,
	0xde, 0x88, 0x2c, 0x66, 0xcc, 0x2e, 0x7d, 0x95, 0x4a, 0x93, 0x7f, 0x47, 0xad, 0x79, 0x8c, 0xfe,
	0x4b, 0x9b, 0x1b, 0x72, 0x2d, 0xa2, 0x10, 0xb5, 0xa4, 0x4c, 0x23, 0xfb, 0x08, 0xc7, 0xd5, 0x35,
	0xaa, 0x5b, 0xbc, 0xb6, 0x75, 0xad, 0x23, 0xf9, 0x87, 0x0d, 0x29, 0xfb, 0x0c, 0x30, 0x42, 0x53,
	0xf5, 0x78, 0x16, 0x35, 0xf6, 0x09, 0xf1, 0xf7, 0x0a, 0xb5, 0xf1, 0x77, 0xd9, 0xd8, 0x15, 0x3c,
	0xaf, 0x05, 0xc3, 0x7c, 0x3c, 0x63, 0x7e, 0x4b, 0x32, 0x9e, 0xfd, 0x57, 0x33, 0x84, 0x27, 0x23,
	0x34, 0x45, 0x4f, 0xd5, 0x5f, 0x84, 0x22, 0x8b, 0x13, 0x2c, 0x92, 0x55, 0xff, 0xdb, 0xad, 0xcc,
	0x1d, 0xe1, 0x1a, 0x5e, 0x4d, 0x90, 0xab, 0x68, 0x51, 0x64, 0xf5, 0x37, 0x52, 0xd7, 0xf6, 0x27,
	0x73, 0xff, 0xac, 0x1a, 0x56, 0xbe, 0x37, 0x5b, 0x48, 0x6d, 0x1b, 0xa1, 0xf9, 0x92, 0x24, 0x3b,
	0x6c, 0x0d, 0xb8, 0x61, 0x7b, 0x40, 0x9c, 0xed, 0x16, 0x8e, 0xeb, 0x33, 0x95, 0x88, 0x9d, 0xd5,
	0x6f, 0x71, 0x13, 0x36, 0x6e, 0xde, 0xdf, 0x5d, 0xe0, 0xac, 0x1c, 0x7a, 0x76, 0x98, 0x03, 0x3f,
	0x78, 0x8a, 0xcd, 0x55, 0xcf, 0x9a, 0x0b, 0xb9, 0x1a, 0x3d, 0xce, 0xe6, 0xd4, 0x1e, 0xd1, 0x2a,
	0x70, 0x23, 0x7e, 0x82, 0x57, 0x2f, 0x5e, 0x90, 0x86, 0xbe, 0xfe, 0x36, 0x1a, 0xbc, 0x52, 0xf7,
	0xb6, 0x43, 0xab, 0x1d, 0xbe, 0xff, 0x15, 0xc4, 0xc2, 0x2c, 0x56, 0xd3, 0x41, 0x44, 0x69, 0xc0,
	0xa5, 0x34, 0x0a, 0x51, 0xd3, 0xdc, 0xac, 0xb9, 0xc2, 0x20, 0xa6, 0x77, 0x6b, 0x52, 0xcb, 0x79,
	0x42, 0xeb, 0x40, 0x2e, 0xe3, 0xa0, 0x30, 0x4d, 0xf7, 0xcb, 0x7f, 0xfe, 0x87, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x9a, 0xf1, 0x3f, 0xb7, 0x3b, 0x04, 0x00, 0x00,
}
