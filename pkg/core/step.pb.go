// Code generated by protoc-gen-go. DO NOT EDIT.
// source: step.proto

package core

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StepQueueWorkflowRequest struct {
	Environment          *Environment `protobuf:"bytes,1,opt,name=environment,proto3" json:"environment,omitempty"`
	Workflow             string       `protobuf:"bytes,2,opt,name=workflow,proto3" json:"workflow,omitempty"`
	Input                []byte       `protobuf:"bytes,3,opt,name=input,proto3" json:"input,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *StepQueueWorkflowRequest) Reset()         { *m = StepQueueWorkflowRequest{} }
func (m *StepQueueWorkflowRequest) String() string { return proto.CompactTextString(m) }
func (*StepQueueWorkflowRequest) ProtoMessage()    {}
func (*StepQueueWorkflowRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3716d53a7e1b752, []int{0}
}

func (m *StepQueueWorkflowRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepQueueWorkflowRequest.Unmarshal(m, b)
}
func (m *StepQueueWorkflowRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepQueueWorkflowRequest.Marshal(b, m, deterministic)
}
func (m *StepQueueWorkflowRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepQueueWorkflowRequest.Merge(m, src)
}
func (m *StepQueueWorkflowRequest) XXX_Size() int {
	return xxx_messageInfo_StepQueueWorkflowRequest.Size(m)
}
func (m *StepQueueWorkflowRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StepQueueWorkflowRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StepQueueWorkflowRequest proto.InternalMessageInfo

func (m *StepQueueWorkflowRequest) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

func (m *StepQueueWorkflowRequest) GetWorkflow() string {
	if m != nil {
		return m.Workflow
	}
	return ""
}

func (m *StepQueueWorkflowRequest) GetInput() []byte {
	if m != nil {
		return m.Input
	}
	return nil
}

type StepQueueWorkflowResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *StepQueueWorkflowResponse) Reset()         { *m = StepQueueWorkflowResponse{} }
func (m *StepQueueWorkflowResponse) String() string { return proto.CompactTextString(m) }
func (*StepQueueWorkflowResponse) ProtoMessage()    {}
func (*StepQueueWorkflowResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3716d53a7e1b752, []int{1}
}

func (m *StepQueueWorkflowResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepQueueWorkflowResponse.Unmarshal(m, b)
}
func (m *StepQueueWorkflowResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepQueueWorkflowResponse.Marshal(b, m, deterministic)
}
func (m *StepQueueWorkflowResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepQueueWorkflowResponse.Merge(m, src)
}
func (m *StepQueueWorkflowResponse) XXX_Size() int {
	return xxx_messageInfo_StepQueueWorkflowResponse.Size(m)
}
func (m *StepQueueWorkflowResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StepQueueWorkflowResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StepQueueWorkflowResponse proto.InternalMessageInfo

type StepLogRequest struct {
	Message              string       `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Environment          *Environment `protobuf:"bytes,2,opt,name=environment,proto3" json:"environment,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte       `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32        `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *StepLogRequest) Reset()         { *m = StepLogRequest{} }
func (m *StepLogRequest) String() string { return proto.CompactTextString(m) }
func (*StepLogRequest) ProtoMessage()    {}
func (*StepLogRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3716d53a7e1b752, []int{2}
}

func (m *StepLogRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepLogRequest.Unmarshal(m, b)
}
func (m *StepLogRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepLogRequest.Marshal(b, m, deterministic)
}
func (m *StepLogRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepLogRequest.Merge(m, src)
}
func (m *StepLogRequest) XXX_Size() int {
	return xxx_messageInfo_StepLogRequest.Size(m)
}
func (m *StepLogRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StepLogRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StepLogRequest proto.InternalMessageInfo

func (m *StepLogRequest) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *StepLogRequest) GetEnvironment() *Environment {
	if m != nil {
		return m.Environment
	}
	return nil
}

type StepOutput struct {
	Output               []byte   `protobuf:"bytes,1,opt,name=output,proto3" json:"output,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_unrecognized     []byte   `json:"-" yaml:"-" xml:"-" bson:"-"`
	XXX_sizecache        int32    `json:"-" yaml:"-" xml:"-" bson:"-"`
}

func (m *StepOutput) Reset()         { *m = StepOutput{} }
func (m *StepOutput) String() string { return proto.CompactTextString(m) }
func (*StepOutput) ProtoMessage()    {}
func (*StepOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3716d53a7e1b752, []int{3}
}

func (m *StepOutput) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StepOutput.Unmarshal(m, b)
}
func (m *StepOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StepOutput.Marshal(b, m, deterministic)
}
func (m *StepOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StepOutput.Merge(m, src)
}
func (m *StepOutput) XXX_Size() int {
	return xxx_messageInfo_StepOutput.Size(m)
}
func (m *StepOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_StepOutput.DiscardUnknown(m)
}

var xxx_messageInfo_StepOutput proto.InternalMessageInfo

func (m *StepOutput) GetOutput() []byte {
	if m != nil {
		return m.Output
	}
	return nil
}

func init() {
	proto.RegisterType((*StepQueueWorkflowRequest)(nil), "core.StepQueueWorkflowRequest")
	proto.RegisterType((*StepQueueWorkflowResponse)(nil), "core.StepQueueWorkflowResponse")
	proto.RegisterType((*StepLogRequest)(nil), "core.StepLogRequest")
	proto.RegisterType((*StepOutput)(nil), "core.StepOutput")
}

func init() { proto.RegisterFile("step.proto", fileDescriptor_d3716d53a7e1b752) }

var fileDescriptor_d3716d53a7e1b752 = []byte{
	// 437 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x14, 0x94, 0xdb, 0xd2, 0x36, 0x2f, 0x49, 0x05, 0xab, 0xaa, 0xb8, 0x2e, 0x82, 0x28, 0xe2, 0x90,
	0x0b, 0xb6, 0x9a, 0x5c, 0xb9, 0x50, 0x54, 0x41, 0x05, 0x08, 0xe3, 0x0a, 0x21, 0x71, 0x41, 0xae,
	0xf5, 0x62, 0x5b, 0xb1, 0xf7, 0x2d, 0xfb, 0x41, 0xc4, 0x91, 0x3f, 0xc2, 0x6f, 0x45, 0xf6, 0xae,
	0xdb, 0xb4, 0xb8, 0x52, 0x6f, 0x9e, 0x79, 0x33, 0xb3, 0x63, 0xbf, 0x35, 0x80, 0xd2, 0x28, 0x42,
	0x21, 0x49, 0x13, 0xdb, 0xc9, 0x48, 0x62, 0x30, 0xca, 0xa8, 0xae, 0x89, 0x5b, 0x6e, 0xfa, 0xc7,
	0x03, 0xff, 0x52, 0xa3, 0xf8, 0x62, 0xd0, 0xe0, 0x37, 0x92, 0xab, 0x65, 0x45, 0xeb, 0x04, 0x7f,
	0x1a, 0x54, 0x9a, 0x2d, 0x60, 0x88, 0xfc, 0x57, 0x29, 0x89, 0xd7, 0xc8, 0xb5, 0xef, 0x4d, 0xbc,
	0xd9, 0x70, 0xfe, 0x24, 0x6c, 0x62, 0xc2, 0xf3, 0x9b, 0x41, 0xb2, 0xa9, 0x62, 0x01, 0xec, 0xaf,
	0x5d, 0x8e, 0xbf, 0x35, 0xf1, 0x66, 0x83, 0xe4, 0x1a, 0xb3, 0x43, 0x78, 0x54, 0x72, 0x61, 0xb4,
	0xbf, 0x3d, 0xf1, 0x66, 0xa3, 0xc4, 0x82, 0xe9, 0x09, 0x1c, 0xf7, 0x54, 0x50, 0x82, 0xb8, 0xc2,
	0xe9, 0x0f, 0x38, 0x68, 0x86, 0x1f, 0x29, 0xef, 0x5a, 0xf9, 0xb0, 0x57, 0xa3, 0x52, 0x69, 0x8e,
	0x6d, 0xa3, 0x41, 0xd2, 0xc1, 0xbb, 0x7d, 0xb7, 0x1e, 0xd2, 0x77, 0xfa, 0x12, 0xa0, 0x39, 0xe0,
	0xb3, 0xd1, 0xc2, 0x68, 0x76, 0x04, 0xbb, 0xd4, 0x3e, 0xb5, 0xd9, 0xa3, 0xc4, 0xa1, 0xf9, 0xdf,
	0x6d, 0x18, 0x9f, 0xf3, 0xbc, 0xe4, 0xd8, 0x88, 0xdf, 0xc4, 0x17, 0x2c, 0x84, 0x9d, 0xb8, 0xe4,
	0x39, 0x63, 0x2e, 0xbf, 0x16, 0xfa, 0xf7, 0x27, 0x5b, 0x24, 0xe8, 0xe1, 0xd8, 0x6b, 0x18, 0xbc,
	0x4d, 0xb3, 0x02, 0x63, 0xa3, 0x0a, 0x76, 0x64, 0x05, 0xd7, 0x84, 0x7b, 0xb7, 0xe0, 0xe9, 0x7f,
	0xbc, 0xfd, 0x0c, 0x1b, 0xee, 0xaa, 0xba, 0xe3, 0xae, 0xaa, 0x7e, 0x77, 0xc3, 0x3b, 0xf7, 0x19,
	0x0c, 0x5b, 0xf2, 0x12, 0x53, 0x99, 0x15, 0xcc, 0xdf, 0xd0, 0x59, 0xaa, 0x4b, 0x38, 0xee, 0x99,
	0xb8, 0x8c, 0x18, 0xc6, 0xb7, 0x36, 0xc4, 0x9e, 0x5b, 0xed, 0x7d, 0xb7, 0x27, 0x78, 0x71, 0xef,
	0xdc, 0x25, 0x7e, 0x80, 0x83, 0x77, 0xa8, 0x3b, 0xfa, 0xab, 0xac, 0xd8, 0x89, 0xb5, 0xdc, 0x66,
	0xbb, 0xbc, 0x67, 0xfd, 0x43, 0x1b, 0x36, 0x97, 0xb0, 0xdf, 0x9c, 0xf4, 0x9e, 0x94, 0x66, 0xa7,
	0xb0, 0x97, 0x18, 0xde, 0x40, 0x76, 0x68, 0x4d, 0x0e, 0x76, 0x51, 0x8f, 0x6f, 0xaa, 0xb9, 0xbd,
	0x2f, 0xda, 0x2e, 0x71, 0x9a, 0xad, 0xd2, 0x1c, 0x2f, 0xf8, 0x92, 0x7a, 0xf7, 0x3a, 0xb6, 0x9c,
	0x93, 0x9d, 0x9d, 0x7e, 0x8f, 0xf2, 0x52, 0x17, 0xe6, 0x2a, 0xcc, 0xa8, 0x8e, 0x52, 0x21, 0xb4,
	0x44, 0x54, 0xb4, 0xd4, 0xeb, 0x54, 0x62, 0x94, 0xd3, 0xab, 0xee, 0xe2, 0x47, 0x62, 0x95, 0x47,
	0x8d, 0xf5, 0x6a, 0xb7, 0xfd, 0xed, 0x16, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x41, 0xa9,
	0x29, 0x98, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EngineStepAPIClient is the client API for EngineStepAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EngineStepAPIClient interface {
	Ping(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error)
	CachePush(ctx context.Context, in *CachePushRequest, opts ...grpc.CallOption) (*CachePushResponse, error)
	CachePull(ctx context.Context, in *CachePullRequest, opts ...grpc.CallOption) (*CachePullResponse, error)
	CacheSearch(ctx context.Context, in *CacheSearchRequest, opts ...grpc.CallOption) (*CacheSearchResponse, error)
	QueueWorkflow(ctx context.Context, in *StepQueueWorkflowRequest, opts ...grpc.CallOption) (*StepQueueWorkflowResponse, error)
	GetWorkflowUrl(ctx context.Context, in *GetWorkflowUrlRequest, opts ...grpc.CallOption) (*GetWorkflowUrlResponse, error)
}

type engineStepAPIClient struct {
	cc *grpc.ClientConn
}

func NewEngineStepAPIClient(cc *grpc.ClientConn) EngineStepAPIClient {
	return &engineStepAPIClient{cc}
}

func (c *engineStepAPIClient) Ping(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/core.EngineStepAPI/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineStepAPIClient) CachePush(ctx context.Context, in *CachePushRequest, opts ...grpc.CallOption) (*CachePushResponse, error) {
	out := new(CachePushResponse)
	err := c.cc.Invoke(ctx, "/core.EngineStepAPI/CachePush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineStepAPIClient) CachePull(ctx context.Context, in *CachePullRequest, opts ...grpc.CallOption) (*CachePullResponse, error) {
	out := new(CachePullResponse)
	err := c.cc.Invoke(ctx, "/core.EngineStepAPI/CachePull", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineStepAPIClient) CacheSearch(ctx context.Context, in *CacheSearchRequest, opts ...grpc.CallOption) (*CacheSearchResponse, error) {
	out := new(CacheSearchResponse)
	err := c.cc.Invoke(ctx, "/core.EngineStepAPI/CacheSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineStepAPIClient) QueueWorkflow(ctx context.Context, in *StepQueueWorkflowRequest, opts ...grpc.CallOption) (*StepQueueWorkflowResponse, error) {
	out := new(StepQueueWorkflowResponse)
	err := c.cc.Invoke(ctx, "/core.EngineStepAPI/QueueWorkflow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineStepAPIClient) GetWorkflowUrl(ctx context.Context, in *GetWorkflowUrlRequest, opts ...grpc.CallOption) (*GetWorkflowUrlResponse, error) {
	out := new(GetWorkflowUrlResponse)
	err := c.cc.Invoke(ctx, "/core.EngineStepAPI/GetWorkflowUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EngineStepAPIServer is the server API for EngineStepAPI service.
type EngineStepAPIServer interface {
	Ping(context.Context, *EmptyMessage) (*EmptyMessage, error)
	CachePush(context.Context, *CachePushRequest) (*CachePushResponse, error)
	CachePull(context.Context, *CachePullRequest) (*CachePullResponse, error)
	CacheSearch(context.Context, *CacheSearchRequest) (*CacheSearchResponse, error)
	QueueWorkflow(context.Context, *StepQueueWorkflowRequest) (*StepQueueWorkflowResponse, error)
	GetWorkflowUrl(context.Context, *GetWorkflowUrlRequest) (*GetWorkflowUrlResponse, error)
}

func RegisterEngineStepAPIServer(s *grpc.Server, srv EngineStepAPIServer) {
	s.RegisterService(&_EngineStepAPI_serviceDesc, srv)
}

func _EngineStepAPI_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineStepAPIServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.EngineStepAPI/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineStepAPIServer).Ping(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineStepAPI_CachePush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CachePushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineStepAPIServer).CachePush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.EngineStepAPI/CachePush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineStepAPIServer).CachePush(ctx, req.(*CachePushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineStepAPI_CachePull_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CachePullRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineStepAPIServer).CachePull(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.EngineStepAPI/CachePull",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineStepAPIServer).CachePull(ctx, req.(*CachePullRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineStepAPI_CacheSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineStepAPIServer).CacheSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.EngineStepAPI/CacheSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineStepAPIServer).CacheSearch(ctx, req.(*CacheSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineStepAPI_QueueWorkflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StepQueueWorkflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineStepAPIServer).QueueWorkflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.EngineStepAPI/QueueWorkflow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineStepAPIServer).QueueWorkflow(ctx, req.(*StepQueueWorkflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EngineStepAPI_GetWorkflowUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkflowUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineStepAPIServer).GetWorkflowUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.EngineStepAPI/GetWorkflowUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineStepAPIServer).GetWorkflowUrl(ctx, req.(*GetWorkflowUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _EngineStepAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.EngineStepAPI",
	HandlerType: (*EngineStepAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _EngineStepAPI_Ping_Handler,
		},
		{
			MethodName: "CachePush",
			Handler:    _EngineStepAPI_CachePush_Handler,
		},
		{
			MethodName: "CachePull",
			Handler:    _EngineStepAPI_CachePull_Handler,
		},
		{
			MethodName: "CacheSearch",
			Handler:    _EngineStepAPI_CacheSearch_Handler,
		},
		{
			MethodName: "QueueWorkflow",
			Handler:    _EngineStepAPI_QueueWorkflow_Handler,
		},
		{
			MethodName: "GetWorkflowUrl",
			Handler:    _EngineStepAPI_GetWorkflowUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "step.proto",
}

// StepHostClient is the client API for StepHost service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StepHostClient interface {
	RunStep(ctx context.Context, in *RunStepRequest, opts ...grpc.CallOption) (*StepOutput, error)
	GetPackageInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Package, error)
}

type stepHostClient struct {
	cc *grpc.ClientConn
}

func NewStepHostClient(cc *grpc.ClientConn) StepHostClient {
	return &stepHostClient{cc}
}

func (c *stepHostClient) RunStep(ctx context.Context, in *RunStepRequest, opts ...grpc.CallOption) (*StepOutput, error) {
	out := new(StepOutput)
	err := c.cc.Invoke(ctx, "/core.StepHost/RunStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stepHostClient) GetPackageInfo(ctx context.Context, in *EmptyMessage, opts ...grpc.CallOption) (*Package, error) {
	out := new(Package)
	err := c.cc.Invoke(ctx, "/core.StepHost/GetPackageInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StepHostServer is the server API for StepHost service.
type StepHostServer interface {
	RunStep(context.Context, *RunStepRequest) (*StepOutput, error)
	GetPackageInfo(context.Context, *EmptyMessage) (*Package, error)
}

func RegisterStepHostServer(s *grpc.Server, srv StepHostServer) {
	s.RegisterService(&_StepHost_serviceDesc, srv)
}

func _StepHost_RunStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepHostServer).RunStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StepHost/RunStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepHostServer).RunStep(ctx, req.(*RunStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StepHost_GetPackageInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StepHostServer).GetPackageInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/core.StepHost/GetPackageInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StepHostServer).GetPackageInfo(ctx, req.(*EmptyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _StepHost_serviceDesc = grpc.ServiceDesc{
	ServiceName: "core.StepHost",
	HandlerType: (*StepHostServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RunStep",
			Handler:    _StepHost_RunStep_Handler,
		},
		{
			MethodName: "GetPackageInfo",
			Handler:    _StepHost_GetPackageInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "step.proto",
}
