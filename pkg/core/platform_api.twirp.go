// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: platform_api.proto

package core

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// =====================
// PlatformAPI Interface
// =====================

type PlatformAPI interface {
	Ping(context.Context, *EmptyMessage) (*BasicResponse, error)

	CreateEnvironment(context.Context, *EnvironmentConfiguration) (*EnvironmentInfo, error)

	DeleteEnvironment(context.Context, *EnvironmentRequest) (*DeleteEnvironmentResponse, error)

	UpdateEnvironment(context.Context, *EnvironmentConfiguration) (*EnvironmentInfo, error)

	GetEnvironmentStatus(context.Context, *EnvironmentRequest) (*EnvironmentInfo, error)

	UpdateAvailable(context.Context, *UpdateAvailableRequest) (*UpdateAvailableResponse, error)
}

// ===========================
// PlatformAPI Protobuf Client
// ===========================

type platformAPIProtobufClient struct {
	client HTTPClient
	urls   [6]string
}

// NewPlatformAPIProtobufClient creates a Protobuf client that implements the PlatformAPI interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewPlatformAPIProtobufClient(addr string, client HTTPClient) PlatformAPI {
	prefix := urlBase(addr) + PlatformAPIPathPrefix
	urls := [6]string{
		prefix + "Ping",
		prefix + "CreateEnvironment",
		prefix + "DeleteEnvironment",
		prefix + "UpdateEnvironment",
		prefix + "GetEnvironmentStatus",
		prefix + "UpdateAvailable",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &platformAPIProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &platformAPIProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *platformAPIProtobufClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIProtobufClient) CreateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	out := new(EnvironmentInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIProtobufClient) DeleteEnvironment(ctx context.Context, in *EnvironmentRequest) (*DeleteEnvironmentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	out := new(DeleteEnvironmentResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIProtobufClient) UpdateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	out := new(EnvironmentInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIProtobufClient) GetEnvironmentStatus(ctx context.Context, in *EnvironmentRequest) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironmentStatus")
	out := new(EnvironmentInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIProtobufClient) UpdateAvailable(ctx context.Context, in *UpdateAvailableRequest) (*UpdateAvailableResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	out := new(UpdateAvailableResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =======================
// PlatformAPI JSON Client
// =======================

type platformAPIJSONClient struct {
	client HTTPClient
	urls   [6]string
}

// NewPlatformAPIJSONClient creates a JSON client that implements the PlatformAPI interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewPlatformAPIJSONClient(addr string, client HTTPClient) PlatformAPI {
	prefix := urlBase(addr) + PlatformAPIPathPrefix
	urls := [6]string{
		prefix + "Ping",
		prefix + "CreateEnvironment",
		prefix + "DeleteEnvironment",
		prefix + "UpdateEnvironment",
		prefix + "GetEnvironmentStatus",
		prefix + "UpdateAvailable",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &platformAPIJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &platformAPIJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *platformAPIJSONClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIJSONClient) CreateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	out := new(EnvironmentInfo)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIJSONClient) DeleteEnvironment(ctx context.Context, in *EnvironmentRequest) (*DeleteEnvironmentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	out := new(DeleteEnvironmentResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIJSONClient) UpdateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	out := new(EnvironmentInfo)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIJSONClient) GetEnvironmentStatus(ctx context.Context, in *EnvironmentRequest) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironmentStatus")
	out := new(EnvironmentInfo)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *platformAPIJSONClient) UpdateAvailable(ctx context.Context, in *UpdateAvailableRequest) (*UpdateAvailableResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	out := new(UpdateAvailableResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ==========================
// PlatformAPI Server Handler
// ==========================

type platformAPIServer struct {
	PlatformAPI
	hooks *twirp.ServerHooks
}

func NewPlatformAPIServer(svc PlatformAPI, hooks *twirp.ServerHooks) TwirpServer {
	return &platformAPIServer{
		PlatformAPI: svc,
		hooks:       hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *platformAPIServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// PlatformAPIPathPrefix is used for all URL paths on a twirp PlatformAPI server.
// Requests are always: POST PlatformAPIPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const PlatformAPIPathPrefix = "/twirp/core.PlatformAPI/"

func (s *platformAPIServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "PlatformAPI")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/core.PlatformAPI/Ping":
		s.servePing(ctx, resp, req)
		return
	case "/twirp/core.PlatformAPI/CreateEnvironment":
		s.serveCreateEnvironment(ctx, resp, req)
		return
	case "/twirp/core.PlatformAPI/DeleteEnvironment":
		s.serveDeleteEnvironment(ctx, resp, req)
		return
	case "/twirp/core.PlatformAPI/UpdateEnvironment":
		s.serveUpdateEnvironment(ctx, resp, req)
		return
	case "/twirp/core.PlatformAPI/GetEnvironmentStatus":
		s.serveGetEnvironmentStatus(ctx, resp, req)
		return
	case "/twirp/core.PlatformAPI/UpdateAvailable":
		s.serveUpdateAvailable(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *platformAPIServer) servePing(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePingJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *platformAPIServer) servePingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EmptyMessage)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) servePingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EmptyMessage)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveCreateEnvironment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateEnvironmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateEnvironmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *platformAPIServer) serveCreateEnvironmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentConfiguration)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.CreateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling CreateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveCreateEnvironmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentConfiguration)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.CreateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling CreateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveDeleteEnvironment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteEnvironmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteEnvironmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *platformAPIServer) serveDeleteEnvironmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *DeleteEnvironmentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.DeleteEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteEnvironmentResponse and nil error while calling DeleteEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveDeleteEnvironmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *DeleteEnvironmentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.DeleteEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteEnvironmentResponse and nil error while calling DeleteEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveUpdateEnvironment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateEnvironmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateEnvironmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *platformAPIServer) serveUpdateEnvironmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentConfiguration)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.UpdateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling UpdateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveUpdateEnvironmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentConfiguration)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.UpdateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling UpdateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveGetEnvironmentStatus(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetEnvironmentStatusJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetEnvironmentStatusProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *platformAPIServer) serveGetEnvironmentStatusJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironmentStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.GetEnvironmentStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling GetEnvironmentStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveGetEnvironmentStatusProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironmentStatus")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.GetEnvironmentStatus(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling GetEnvironmentStatus. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveUpdateAvailable(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAvailableJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateAvailableProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *platformAPIServer) serveUpdateAvailableJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateAvailableRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UpdateAvailableResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.UpdateAvailable(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvailableResponse and nil error while calling UpdateAvailable. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) serveUpdateAvailableProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(UpdateAvailableRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UpdateAvailableResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.PlatformAPI.UpdateAvailable(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvailableResponse and nil error while calling UpdateAvailable. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *platformAPIServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *platformAPIServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor2 = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdb, 0x6e, 0xd3, 0x40,
	0x10, 0x25, 0x17, 0x4a, 0x33, 0x84, 0x36, 0x19, 0x2e, 0x35, 0xa6, 0x5c, 0xe4, 0xa7, 0x0a, 0x89,
	0x58, 0x94, 0x77, 0xa4, 0xb6, 0x40, 0x54, 0x24, 0xaa, 0xc8, 0xa8, 0x3c, 0xf0, 0x52, 0x6d, 0x9c,
	0x89, 0xb3, 0xaa, 0xbd, 0xbb, 0xec, 0xae, 0x13, 0xe5, 0x37, 0xf8, 0x21, 0x7e, 0x0d, 0xf9, 0x12,
	0xb0, 0xeb, 0x46, 0xe2, 0x81, 0xb7, 0xdd, 0x33, 0x67, 0x67, 0xce, 0x99, 0x19, 0x2d, 0xa0, 0x8a,
	0x99, 0x9d, 0x4b, 0x9d, 0x5c, 0x31, 0xc5, 0x47, 0x4a, 0x4b, 0x2b, 0xb1, 0x1b, 0x4a, 0x4d, 0x6e,
	0x3f, 0x94, 0x49, 0x22, 0x45, 0x81, 0xb9, 0x68, 0x2c, 0xa9, 0xab, 0x98, 0x4f, 0x35, 0xd3, 0xeb,
	0x02, 0xf3, 0x16, 0xe0, 0x7c, 0x14, 0x4b, 0xae, 0xa5, 0x48, 0x48, 0xd8, 0x33, 0x29, 0xe6, 0x3c,
	0x4a, 0x35, 0xb3, 0x5c, 0x0a, 0x3c, 0x82, 0xfd, 0x4a, 0xec, 0x82, 0x25, 0xe4, 0xb4, 0x5e, 0xb5,
	0x8e, 0x7a, 0xc1, 0x4d, 0x18, 0x3d, 0xe8, 0x07, 0x64, 0x64, 0xaa, 0x43, 0x9a, 0xc4, 0x4c, 0x38,
	0xed, 0x9c, 0x56, 0xc3, 0xbc, 0xf7, 0x80, 0x95, 0x67, 0x01, 0xfd, 0x48, 0xc9, 0xd8, 0x7f, 0xaf,
	0xe1, 0xfd, 0x6c, 0xd5, 0xa8, 0xe7, 0x62, 0x2e, 0xd1, 0x87, 0x1d, 0x63, 0x99, 0x4d, 0x4d, 0xfe,
	0x68, 0xef, 0xf8, 0x60, 0x94, 0xd9, 0x1e, 0x55, 0x68, 0x5f, 0xf3, 0x70, 0x50, 0xd2, 0x32, 0xa1,
	0xfa, 0x16, 0xa1, 0x55, 0x0c, 0x07, 0xd0, 0x49, 0x75, 0xec, 0x74, 0xf2, 0x50, 0x76, 0x44, 0x07,
	0xee, 0x25, 0x64, 0x0c, 0x8b, 0xc8, 0xe9, 0xe6, 0xe8, 0xe6, 0xea, 0x3d, 0x83, 0xa7, 0x1f, 0x28,
	0x26, 0x4b, 0x35, 0x6b, 0x46, 0x49, 0x61, 0xc8, 0xfb, 0x06, 0x4f, 0x2e, 0xd5, 0x8c, 0x59, 0x3a,
	0x59, 0x32, 0x1e, 0xb3, 0x69, 0x4c, 0x1b, 0xd7, 0x7b, 0xd0, 0x96, 0xa6, 0x34, 0xda, 0x96, 0x06,
	0x11, 0xba, 0x4c, 0x87, 0x8b, 0x52, 0x4e, 0x7e, 0xce, 0x8a, 0x2e, 0x49, 0x1b, 0x2e, 0x45, 0x29,
	0x65, 0x73, 0xf5, 0x42, 0x38, 0x68, 0xe4, 0x2d, 0x4a, 0xe2, 0x21, 0xf4, 0xd8, 0x06, 0xcc, 0xf3,
	0xef, 0x06, 0x7f, 0x81, 0x6a, 0xca, 0x76, 0x2d, 0x65, 0xd3, 0xf3, 0xeb, 0x31, 0x0c, 0x1b, 0x6d,
	0xc4, 0x3e, 0xec, 0x9e, 0x69, 0x62, 0x96, 0x8b, 0x68, 0x70, 0x07, 0x7b, 0x70, 0x37, 0x20, 0x36,
	0x5b, 0x0f, 0x5a, 0x08, 0xb0, 0xf3, 0x89, 0xf1, 0x98, 0x66, 0x83, 0x36, 0x3e, 0x80, 0xde, 0xa5,
	0x8a, 0x34, 0x9b, 0x65, 0xac, 0xce, 0xf1, 0xaf, 0x0e, 0xdc, 0x9f, 0x94, 0x0b, 0x7a, 0x32, 0x39,
	0x47, 0x1f, 0xba, 0x13, 0x2e, 0x22, 0xc4, 0x72, 0x56, 0x89, 0xb2, 0xeb, 0x2f, 0x45, 0x3b, 0xdd,
	0x87, 0x05, 0x76, 0xca, 0x0c, 0x0f, 0xff, 0x78, 0xfa, 0x0c, 0xc3, 0xbc, 0x68, 0xb5, 0xc7, 0xf8,
	0xa2, 0x31, 0xe9, 0xda, 0xee, 0xba, 0x8f, 0x1b, 0xf1, 0x7c, 0x61, 0x2e, 0x60, 0xd8, 0x98, 0x17,
	0x3a, 0x0d, 0x6e, 0x39, 0x27, 0xf7, 0x65, 0x11, 0xd9, 0x3a, 0xe2, 0x4c, 0x5b, 0x31, 0x8a, 0xff,
	0xa0, 0x6d, 0x0c, 0x8f, 0xc6, 0x64, 0x9b, 0x4d, 0xdf, 0x2e, 0x6f, 0xab, 0xc9, 0xfd, 0x1b, 0xfb,
	0x81, 0x87, 0x05, 0xf3, 0xf6, 0x75, 0x74, 0x9f, 0x6f, 0x89, 0x16, 0x26, 0x4f, 0xdf, 0x7e, 0xf7,
	0x23, 0x6e, 0x17, 0xe9, 0x74, 0x14, 0xca, 0xc4, 0x67, 0x4a, 0x59, 0x4d, 0x64, 0xe4, 0xdc, 0xae,
	0x98, 0x26, 0x3f, 0x92, 0x6f, 0x56, 0x52, 0x5f, 0xcf, 0x63, 0xb9, 0xf2, 0xd5, 0x75, 0xe4, 0x67,
	0xa9, 0xa6, 0x3b, 0xf9, 0xef, 0xf2, 0xee, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xad, 0xd5, 0xc3,
	0x86, 0x9b, 0x04, 0x00, 0x00,
}
