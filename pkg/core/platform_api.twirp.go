// Code generated by protoc-gen-twirp v5.5.0, DO NOT EDIT.
// source: platform_api.proto

package core

import bytes "bytes"
import strings "strings"
import context "context"
import fmt "fmt"
import ioutil "io/ioutil"
import http "net/http"

import jsonpb "github.com/golang/protobuf/jsonpb"
import proto "github.com/golang/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

// ===============================
// EnvironmentManagement Interface
// ===============================

type EnvironmentManagement interface {
	Ping(context.Context, *EmptyMessage) (*BasicResponse, error)

	CreateEnvironment(context.Context, *EnvironmentConfiguration) (*EnvironmentInfo, error)

	DeleteEnvironment(context.Context, *EnvironmentRequest) (*DeleteEnvironmentResponse, error)

	UpdateEnvironment(context.Context, *EnvironmentConfiguration) (*EnvironmentInfo, error)

	GetEnvironment(context.Context, *EnvironmentRequest) (*EnvironmentInfo, error)

	UpdateAvailable(context.Context, *UpdateAvailableRequest) (*UpdateAvailableResponse, error)
}

// =====================================
// EnvironmentManagement Protobuf Client
// =====================================

type environmentManagementProtobufClient struct {
	client HTTPClient
	urls   [6]string
}

// NewEnvironmentManagementProtobufClient creates a Protobuf client that implements the EnvironmentManagement interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewEnvironmentManagementProtobufClient(addr string, client HTTPClient) EnvironmentManagement {
	prefix := urlBase(addr) + EnvironmentManagementPathPrefix
	urls := [6]string{
		prefix + "Ping",
		prefix + "CreateEnvironment",
		prefix + "DeleteEnvironment",
		prefix + "UpdateEnvironment",
		prefix + "GetEnvironment",
		prefix + "UpdateAvailable",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &environmentManagementProtobufClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &environmentManagementProtobufClient{
		client: client,
		urls:   urls,
	}
}

func (c *environmentManagementProtobufClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementProtobufClient) CreateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	out := new(EnvironmentInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementProtobufClient) DeleteEnvironment(ctx context.Context, in *EnvironmentRequest) (*DeleteEnvironmentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	out := new(DeleteEnvironmentResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementProtobufClient) UpdateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	out := new(EnvironmentInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementProtobufClient) GetEnvironment(ctx context.Context, in *EnvironmentRequest) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironment")
	out := new(EnvironmentInfo)
	err := doProtobufRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementProtobufClient) UpdateAvailable(ctx context.Context, in *UpdateAvailableRequest) (*UpdateAvailableResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	out := new(UpdateAvailableResponse)
	err := doProtobufRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// =================================
// EnvironmentManagement JSON Client
// =================================

type environmentManagementJSONClient struct {
	client HTTPClient
	urls   [6]string
}

// NewEnvironmentManagementJSONClient creates a JSON client that implements the EnvironmentManagement interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewEnvironmentManagementJSONClient(addr string, client HTTPClient) EnvironmentManagement {
	prefix := urlBase(addr) + EnvironmentManagementPathPrefix
	urls := [6]string{
		prefix + "Ping",
		prefix + "CreateEnvironment",
		prefix + "DeleteEnvironment",
		prefix + "UpdateEnvironment",
		prefix + "GetEnvironment",
		prefix + "UpdateAvailable",
	}
	if httpClient, ok := client.(*http.Client); ok {
		return &environmentManagementJSONClient{
			client: withoutRedirects(httpClient),
			urls:   urls,
		}
	}
	return &environmentManagementJSONClient{
		client: client,
		urls:   urls,
	}
}

func (c *environmentManagementJSONClient) Ping(ctx context.Context, in *EmptyMessage) (*BasicResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	out := new(BasicResponse)
	err := doJSONRequest(ctx, c.client, c.urls[0], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementJSONClient) CreateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	out := new(EnvironmentInfo)
	err := doJSONRequest(ctx, c.client, c.urls[1], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementJSONClient) DeleteEnvironment(ctx context.Context, in *EnvironmentRequest) (*DeleteEnvironmentResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	out := new(DeleteEnvironmentResponse)
	err := doJSONRequest(ctx, c.client, c.urls[2], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementJSONClient) UpdateEnvironment(ctx context.Context, in *EnvironmentConfiguration) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	out := new(EnvironmentInfo)
	err := doJSONRequest(ctx, c.client, c.urls[3], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementJSONClient) GetEnvironment(ctx context.Context, in *EnvironmentRequest) (*EnvironmentInfo, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironment")
	out := new(EnvironmentInfo)
	err := doJSONRequest(ctx, c.client, c.urls[4], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *environmentManagementJSONClient) UpdateAvailable(ctx context.Context, in *UpdateAvailableRequest) (*UpdateAvailableResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	out := new(UpdateAvailableResponse)
	err := doJSONRequest(ctx, c.client, c.urls[5], in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ====================================
// EnvironmentManagement Server Handler
// ====================================

type environmentManagementServer struct {
	EnvironmentManagement
	hooks *twirp.ServerHooks
}

func NewEnvironmentManagementServer(svc EnvironmentManagement, hooks *twirp.ServerHooks) TwirpServer {
	return &environmentManagementServer{
		EnvironmentManagement: svc,
		hooks:                 hooks,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *environmentManagementServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// EnvironmentManagementPathPrefix is used for all URL paths on a twirp EnvironmentManagement server.
// Requests are always: POST EnvironmentManagementPathPrefix/method
// It can be used in an HTTP mux to route twirp requests along with non-twirp requests on other routes.
const EnvironmentManagementPathPrefix = "/twirp/core.EnvironmentManagement/"

func (s *environmentManagementServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "core")
	ctx = ctxsetters.WithServiceName(ctx, "EnvironmentManagement")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}

	switch req.URL.Path {
	case "/twirp/core.EnvironmentManagement/Ping":
		s.servePing(ctx, resp, req)
		return
	case "/twirp/core.EnvironmentManagement/CreateEnvironment":
		s.serveCreateEnvironment(ctx, resp, req)
		return
	case "/twirp/core.EnvironmentManagement/DeleteEnvironment":
		s.serveDeleteEnvironment(ctx, resp, req)
		return
	case "/twirp/core.EnvironmentManagement/UpdateEnvironment":
		s.serveUpdateEnvironment(ctx, resp, req)
		return
	case "/twirp/core.EnvironmentManagement/GetEnvironment":
		s.serveGetEnvironment(ctx, resp, req)
		return
	case "/twirp/core.EnvironmentManagement/UpdateAvailable":
		s.serveUpdateAvailable(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		err = badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, err)
		return
	}
}

func (s *environmentManagementServer) servePing(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.servePingJSON(ctx, resp, req)
	case "application/protobuf":
		s.servePingProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *environmentManagementServer) servePingJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EmptyMessage)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) servePingProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "Ping")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EmptyMessage)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *BasicResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.Ping(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *BasicResponse and nil error while calling Ping. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveCreateEnvironment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveCreateEnvironmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveCreateEnvironmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *environmentManagementServer) serveCreateEnvironmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentConfiguration)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.CreateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling CreateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveCreateEnvironmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "CreateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentConfiguration)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.CreateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling CreateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveDeleteEnvironment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveDeleteEnvironmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveDeleteEnvironmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *environmentManagementServer) serveDeleteEnvironmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *DeleteEnvironmentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.DeleteEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteEnvironmentResponse and nil error while calling DeleteEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveDeleteEnvironmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "DeleteEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *DeleteEnvironmentResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.DeleteEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *DeleteEnvironmentResponse and nil error while calling DeleteEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveUpdateEnvironment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateEnvironmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateEnvironmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *environmentManagementServer) serveUpdateEnvironmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentConfiguration)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.UpdateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling UpdateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveUpdateEnvironmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentConfiguration)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.UpdateEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling UpdateEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveGetEnvironment(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveGetEnvironmentJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveGetEnvironmentProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *environmentManagementServer) serveGetEnvironmentJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(EnvironmentRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.GetEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling GetEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveGetEnvironmentProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "GetEnvironment")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(EnvironmentRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *EnvironmentInfo
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.GetEnvironment(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *EnvironmentInfo and nil error while calling GetEnvironment. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveUpdateAvailable(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveUpdateAvailableJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveUpdateAvailableProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *environmentManagementServer) serveUpdateAvailableJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	reqContent := new(UpdateAvailableRequest)
	unmarshaler := jsonpb.Unmarshaler{AllowUnknownFields: true}
	if err = unmarshaler.Unmarshal(req.Body, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request json")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UpdateAvailableResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.UpdateAvailable(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvailableResponse and nil error while calling UpdateAvailable. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	var buf bytes.Buffer
	marshaler := &jsonpb.Marshaler{OrigName: true}
	if err = marshaler.Marshal(&buf, respContent); err != nil {
		err = wrapErr(err, "failed to marshal json response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.WriteHeader(http.StatusOK)

	respBytes := buf.Bytes()
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) serveUpdateAvailableProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "UpdateAvailable")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := ioutil.ReadAll(req.Body)
	if err != nil {
		err = wrapErr(err, "failed to read request body")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}
	reqContent := new(UpdateAvailableRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		err = wrapErr(err, "failed to parse request proto")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	// Call service method
	var respContent *UpdateAvailableResponse
	func() {
		defer func() {
			// In case of a panic, serve a 500 error and then panic.
			if r := recover(); r != nil {
				s.writeError(ctx, resp, twirp.InternalError("Internal service panic"))
				panic(r)
			}
		}()
		respContent, err = s.EnvironmentManagement.UpdateAvailable(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *UpdateAvailableResponse and nil error while calling UpdateAvailable. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		err = wrapErr(err, "failed to marshal proto response")
		s.writeError(ctx, resp, twirp.InternalErrorWith(err))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *environmentManagementServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor2, 0
}

func (s *environmentManagementServer) ProtocGenTwirpVersion() string {
	return "v5.5.0"
}

var twirpFileDescriptor2 = []byte{
	// 529 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x4c,
	0x10, 0x7e, 0xf3, 0xf1, 0x86, 0x66, 0x54, 0xda, 0x64, 0x50, 0x5b, 0x63, 0xca, 0x87, 0x7c, 0xaa,
	0x90, 0x88, 0x45, 0xb9, 0x23, 0xb5, 0x05, 0x2a, 0x90, 0x5a, 0x55, 0x46, 0xe5, 0xc0, 0xa5, 0x9a,
	0x38, 0x13, 0x77, 0x55, 0x7b, 0xd7, 0xec, 0xae, 0x13, 0xe5, 0xc6, 0x6f, 0xe0, 0x2f, 0xf1, 0xc7,
	0x90, 0x3f, 0x42, 0x9d, 0xba, 0x91, 0x7a, 0xe0, 0xb6, 0xf3, 0xcc, 0xe3, 0x67, 0xe6, 0x99, 0x19,
	0x19, 0x30, 0x8d, 0xc9, 0x4e, 0x95, 0x4e, 0xae, 0x28, 0x15, 0xa3, 0x54, 0x2b, 0xab, 0xb0, 0x1b,
	0x2a, 0xcd, 0xee, 0x66, 0xa8, 0x92, 0x44, 0xc9, 0x12, 0x73, 0xd1, 0x58, 0x4e, 0xaf, 0x62, 0x31,
	0xd6, 0xa4, 0x17, 0x25, 0xe6, 0xfd, 0x6c, 0x81, 0xf3, 0x51, 0xce, 0x84, 0x56, 0x32, 0x61, 0x69,
	0x4f, 0x94, 0x9c, 0x8a, 0x28, 0xd3, 0x64, 0x85, 0x92, 0x78, 0x00, 0xdb, 0xb5, 0xdc, 0x39, 0x25,
	0xec, 0xb4, 0x5e, 0xb5, 0x0e, 0xfa, 0xc1, 0x5d, 0x18, 0x3d, 0xd8, 0x0c, 0xd8, 0xa8, 0x4c, 0x87,
	0x7c, 0x11, 0x93, 0x74, 0xda, 0x05, 0x6d, 0x05, 0xc3, 0x5d, 0xe8, 0x05, 0x1c, 0x09, 0x25, 0x9d,
	0x4e, 0x91, 0xad, 0x22, 0xef, 0x3d, 0x60, 0x4d, 0x2e, 0xe0, 0x1f, 0x19, 0x1b, 0xfb, 0xf0, 0xda,
	0xde, 0xaf, 0xd6, 0x0a, 0xf5, 0xb3, 0x9c, 0x2a, 0xf4, 0xa1, 0x67, 0x2c, 0xd9, 0xcc, 0x14, 0x1f,
	0x6d, 0x1d, 0xee, 0x8d, 0xf2, 0x79, 0x8c, 0x6a, 0xb4, 0xaf, 0x45, 0x3a, 0xa8, 0x68, 0xb9, 0x01,
	0x7d, 0x8f, 0x81, 0x3a, 0x86, 0x03, 0xe8, 0x64, 0x3a, 0xae, 0xba, 0xcf, 0x9f, 0xe8, 0xc0, 0xa3,
	0x84, 0x8d, 0xa1, 0x88, 0x9d, 0x6e, 0x81, 0x2e, 0x43, 0xef, 0x19, 0x3c, 0xfd, 0xc0, 0x31, 0x5b,
	0x5e, 0xb1, 0x66, 0x52, 0x25, 0x0d, 0x7b, 0xdf, 0x60, 0xf7, 0x32, 0x9d, 0x90, 0xe5, 0xa3, 0x19,
	0x89, 0x98, 0xc6, 0x31, 0x2f, 0x5d, 0x6f, 0x41, 0x5b, 0x99, 0xca, 0x68, 0x5b, 0x19, 0x44, 0xe8,
	0x92, 0x0e, 0xaf, 0xab, 0x76, 0x8a, 0x77, 0x5e, 0x74, 0xc6, 0xda, 0xdc, 0x0e, 0x72, 0x19, 0x7a,
	0x21, 0xec, 0x35, 0x74, 0xcb, 0x92, 0xb8, 0x0f, 0x7d, 0x5a, 0x82, 0x85, 0xfe, 0x46, 0x70, 0x0b,
	0xd4, 0x25, 0xdb, 0x2b, 0x92, 0x4d, 0xcf, 0xaf, 0x4f, 0x61, 0xd8, 0x18, 0x23, 0x6e, 0xc2, 0xc6,
	0x89, 0x66, 0xb2, 0x42, 0x46, 0x83, 0xff, 0xb0, 0x0f, 0xff, 0x07, 0x4c, 0x93, 0xc5, 0xa0, 0x85,
	0x00, 0xbd, 0x4f, 0x24, 0x62, 0x9e, 0x0c, 0xda, 0xf8, 0x18, 0xfa, 0x97, 0x69, 0xa4, 0x69, 0x92,
	0xb3, 0x3a, 0x87, 0xbf, 0x3b, 0xb0, 0x53, 0x53, 0x3a, 0x23, 0x49, 0x11, 0xe7, 0x2f, 0xf4, 0xa1,
	0x7b, 0x21, 0x64, 0x84, 0x58, 0x6d, 0x2d, 0x49, 0xed, 0xe2, 0xac, 0x1c, 0xac, 0xfb, 0xa4, 0xc4,
	0x8e, 0xc9, 0x88, 0xf0, 0xaf, 0xbb, 0x2f, 0x30, 0x2c, 0xca, 0xd7, 0xa7, 0x8d, 0x2f, 0x1a, 0x3b,
	0x5f, 0xb9, 0x6e, 0x77, 0xa7, 0x91, 0x2f, 0x4e, 0xe7, 0x1c, 0x86, 0x8d, 0xcd, 0xa1, 0xd3, 0xe0,
	0x56, 0x1b, 0x73, 0x5f, 0x96, 0x99, 0xb5, 0xcb, 0xce, 0x7b, 0x2b, 0x97, 0xf2, 0x0f, 0x7a, 0x3b,
	0x82, 0xad, 0x53, 0xb6, 0x0f, 0x6b, 0x6c, 0xad, 0xbd, 0xed, 0x3b, 0x37, 0x82, 0xfb, 0x25, 0xf3,
	0xfe, 0x93, 0x74, 0x9f, 0xaf, 0xc9, 0x96, 0xf6, 0x8e, 0xdf, 0x7e, 0xf7, 0x23, 0x61, 0xaf, 0xb3,
	0xf1, 0x28, 0x54, 0x89, 0x4f, 0x69, 0x6a, 0x35, 0xb3, 0x51, 0x53, 0x3b, 0x27, 0xcd, 0x7e, 0xa4,
	0xde, 0xcc, 0x95, 0xbe, 0x99, 0xc6, 0x6a, 0xee, 0xa7, 0x37, 0x91, 0x9f, 0x4b, 0x8d, 0x7b, 0xc5,
	0xaf, 0xe7, 0xdd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x40, 0xf3, 0x24, 0x68, 0xb8, 0x04, 0x00,
	0x00,
}
